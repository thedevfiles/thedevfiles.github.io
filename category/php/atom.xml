<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | The Dev Files]]></title>
  <link href="http://www.thedevfiles.com/category/php/atom.xml" rel="self"/>
  <link href="http://www.thedevfiles.com/"/>
  <updated>2014-09-03T17:36:45-07:00</updated>
  <id>http://www.thedevfiles.com/</id>
  <author>
    <name><![CDATA[Jonathan Bernardi]]></name>
    <email><![CDATA[jon@jonbernardi.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a simple contact form in PHP - Part 3]]></title>
    <link href="http://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-3/"/>
    <updated>2014-09-03T00:00:00-07:00</updated>
    <id>http://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-3</id>
    <content type="html"><![CDATA[<p>As we last left it in <a href="/2014/09/building-a-simple-contact-form-in-php-part-2">part 2</a> of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1">Building a simple contact form in PHP</a> we added server-side form validation to our contact form and input filtering to the submitted data before sending out the email.</p>

<p>In this part we are going to add some client-side validation to our contact form.</p>

<!--more-->


<p>This is the contact form as we left it.</p>

<pre><code class="php contact.php"> &lt;?php

$valid = true;
$errors = array();

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="text" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message"&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Why Add Client-Side Validation?</h2>

<p>It is important to keep in mind that client-side validation doesn&rsquo;t not provide any extra security for your application.  Circumventing it is as easy as turning off javascript in your browser.
Implementing client-side validation without server-side validation is like not having any validation at all.
So why even have client-side validation?  Server-Side validation will catch all of the same problems so what is the benefit?</p>

<p>The reason to use client-side validation is simply to make things a bit easier on the user.
To validate something om the server the form must be submitted and a new request is created.
If the validation fails the browser must download and render the page again including all assets like css, and images.  Any javascript files will be run again.
If a required form field is blank why even bother to send the request to the server in the first place just to tell you what you already know?</p>

<p>For a form as small as this contact form this isn&rsquo;t really a big deal but the more fields there are and the more complicated the form is the more valuable client-side form validation becomes.</p>

<h2>Adding HTML5 Client-Side Validation</h2>

<p>Most browsers actually have built in client-side validation just by adding attributes to your form elements.</p>

<p>Add a <code>required</code> attribute to each of the form elements.</p>

<pre><code class="php">// name
&lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required&gt;
// email
&lt;input id="email" type="text" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required&gt;
// message
&lt;textarea id="message" name="message"&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
</code></pre>

<p>Now load up the form any try submitting a blank form.
Depending on your browser you should see a message telling you to fill out a required field and the form isn&rsquo;t submitted.</p>

<p>Here is what it looks like in Google Chrome.</p>

<p><img src="/images/contact-form/part-3/html5-validation.png" alt="HTML5 Validation" /></p>

<p>Now change the email input type from <code>text</code> to <code>email</code> so it looks like the following.</p>

<pre><code class="php">&lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required&gt;
</code></pre>

<p>Now fill out the other two fields en enter something that isn&rsquo;t an email address in the email field.</p>

<p>Here is what I see in Google Chrome.</p>

<p><img src="/images/contact-form/part-3/html5-email-validation.png" alt="HTML5 Validation" /></p>

<p>This also has the benefit of showing an email-specific keyboard on many mobile devices when the email field is filled out.</p>

<h2>Javascript Form Validation using Parsley</h2>

<p>While the built-in html5 validation does get the job done it tends to be ugly and you don&rsquo;t have much control over it.</p>

<p>We are going to use a form validation library called <a href="http://parsleyjs.org">Parsley</a> to help us add form validation that will use the same attributes as the html5 form validation we already added.</p>

<p>Add the following to the html below the form but before the closing <code>&lt;/body&gt;</code> tag.</p>

<p>```html</p>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>


<script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"></script>


<pre><code>
Parsley depends on [jQuery](http://jquery.com) so I am loading that as well as the Parsley library itself.
I am loading both using a [CDN](http://en.wikipedia.org/wiki/Content_delivery_network) but you could just as easily download both libraries from their websites and include them locally.

Now that the library is included the first thing we need to do is disable the html5 form validation.  
Add a `novalidate` attribute to the `form` tag.  This will disable the built-in html5 form validation so we can have Parsley do the work.

Next we need to tell Parsley that we want it to validate our form.  
Add a `data-parsley-validate` attribute to the `form` tag.

The form tag should now look like the following.
</code></pre>

<p><form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate>
```</p>

<p>Now load up the page and try submitting a blank form.</p>

<p>You should see <code>This value is required.</code> under each of the form fields.</p>

<p>Lets make it look a bit better.  Add the following to your <code>styles.css</code> file.</p>

<pre><code class="css">ul.parsley-errors-list{
    margin:0;
    padding:0;
}
ul.parsley-errors-list li{
    margin:0 0 0 5px;
    padding:0;
    list-style-type: none;
    color: #CC0000;
    font-weight:bold;
}
</code></pre>

<p><img src="/images/contact-form/part-3/parsely-validation.png" alt="HTML5 Validation" /></p>

<h3>Customizing error messages</h3>

<p>Now we are going to customize the error messages displayed for failed form validation.</p>

<p>Add a <code>data-parsley-required-message</code> attribute to each of the form fields equal to the message you want displayed when that validation fails.
It should look like the following.</p>

<p>```php</p>

<div class="row">
    <label for="name">Name: </label>
    <input id="name" type="text" name="name" value="<?php echo htmlspecialchars($contact['name']);?>" required data-parsley-required-message="You must enter your name.">
</div>


<div class="row">
    <label for="email">Email Address: </label>
    <input id="email" type="email" name="email" value="<?php echo htmlspecialchars($contact['email']);?>" required data-parsley-required-message="You must enter your email address." parsley-type-email-message="You must enter a valid email address.">
</div>


<div class="row">
    <label for="message">Message:</label>
    <textarea id="message" name="message" required data-parsley-required-message="You must enter a message."><?php echo htmlspecialchars($contact['message']);?></textarea>
</div>


<pre><code>Now the custom messages you provided will be displayed instead of the default `This value is required.` message.

![HTML5 Validation](/images/contact-form/part-3/parsely-messages.png)

 The full `contact.php` should now look like the following.
</code></pre>

<p>&lt;?php</p>

<p>$valid = true;
$errors = array();</p>

<p>$contact = array(
    &lsquo;name&rsquo; => null,
    &lsquo;email&rsquo; => null,
    &lsquo;message&rsquo; => null
);</p>

<p>// Check if the form has been posted
if (isset($<em>POST[&lsquo;name&rsquo;], $</em>POST[&lsquo;email&rsquo;], $_POST[&lsquo;message&rsquo;])) {
    $contact = filter_input_array(INPUT_POST, array(
        &lsquo;name&rsquo;   => FILTER_SANITIZE_STRING,
        &lsquo;email&rsquo;   => FILTER_SANITIZE_STRING,
        &lsquo;message&rsquo;   => FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact[&lsquo;name&rsquo;])) {
        $valid = false;
        $errors[&lsquo;name&rsquo;] = &ldquo;You must enter your name.&rdquo;;
    }
    if (empty($contact[&lsquo;email&rsquo;])) {
        $valid = false;
        $errors[&lsquo;email&rsquo;] = &ldquo;You must enter your email address.&rdquo;;
    } elseif (!filter_input(INPUT_POST, &lsquo;email&rsquo;, FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors[&lsquo;email&rsquo;] = &ldquo;You must enter a valid email address.&rdquo;;
    }
    if (empty($contact[&lsquo;message&rsquo;])) {
        $valid = false;
        $errors[&lsquo;message&rsquo;] = &ldquo;You must enter a message.&rdquo;;
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = &ldquo;<a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#98;&#117;&#115;&#105;&#110;&#101;&#115;&#115;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;">&#x62;&#x75;&#115;&#105;&#x6e;&#x65;&#115;&#x73;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;</a>&rdquo;;
        // The email subject
        $subject = &ldquo;Contact Form Submission&rdquo;;
        // Set the from and reply-to address for the email
        $headers = &ldquo;From: website@example.com\r\n&rdquo;
                 . &ldquo;Reply-To: &rdquo; . $contact[&lsquo;email&rsquo;] . &ldquo;\r\n&rdquo;
                 . &ldquo;X-Mailer: PHP/&rdquo; . phpversion();
        // Build the body of the email
        $mailbody = &ldquo;The contact form has been filled out.\n\n&rdquo;
                  . &ldquo;Name: &rdquo; . $contact[&lsquo;name&rsquo;] . &ldquo;\n&rdquo;
                  . &ldquo;Email: &rdquo; . $contact[&lsquo;email&rsquo;] . &ldquo;\n&rdquo;
                  . &ldquo;Message:\n&rdquo; . $contact[&lsquo;message&rsquo;];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header(&ldquo;location: thankyou.html&rdquo;);
        exit;
    }
}</p>

<p>?>
&lt;!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Contact Us</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate>
        <fieldset>
            <legend>Contact Us</legend>
            &lt;?php if (!$valid): ?>
                <div class="error">
                    &lt;?php foreach($errors as $message):?>
                        <div>&lt;?php echo htmlspecialchars($message); ?></div>
                    &lt;?php endforeach; ?>
                </div>
            &lt;?php endif; ?>
            <div class="row">
                <label for="name">Name: </label>
                <input id="name" type="text" name="name" value="<?php echo htmlspecialchars($contact['name']);?>&ldquo; required data-parsley-required-message="You must enter your name.&rdquo;>
            </div>
            <div class="row">
                <label for="email">Email Address: </label>
                <input id="email" type="email" name="email" value="<?php echo htmlspecialchars($contact['email']);?>&ldquo; required data-parsley-required-message="You must enter your email address.&rdquo; parsley-type-email-message=&ldquo;You must enter a valid email address.&rdquo;>
            </div>
            <div class="row">
                <label for="message">Message:</label>
                <textarea id="message" name="message" required data-parsley-required-message="You must enter a message.">&lt;?php echo htmlspecialchars($contact[&lsquo;message&rsquo;]);?></textarea>
            </div>
            <div class="row">
                <input type="submit" value="Submit">
            </div>
        </fieldset>
    </form></p>

<pre><code>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a simple contact form in PHP - Part 2]]></title>
    <link href="http://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-2/"/>
    <updated>2014-09-02T00:00:00-07:00</updated>
    <id>http://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-2</id>
    <content type="html"><![CDATA[<p>In <a href="/2014/09/building-a-simple-contact-form-in-php-part-1">part 1</a> of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1">Building a simple contact form in PHP</a> we built a simple contact form that sends a notification when the form is posted with the values the user posted.</p>

<p>As we discussed at the end of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1">part 1</a> there are a few problems with our contact form.</p>

<p>We are going to work on solving some of those problems.</p>

<!--more-->


<p>The is what the contact form looked like as we last left it.</p>

<pre><code class="php contact.php">&lt;?php

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    // The email address the email will be sent to
    $to = "business@example.com";
    // The email subject
    $subject = "Contact Form Submission";
    // Set the from and reply-to address for the email
    $headers = "From: website@example.com\r\n"
             . "X-Mailer: PHP/" . phpversion();
    // Build the body of the email
    $mailbody = "The contact form has been filled out.\n\n"
              . "Name: " . $_POST['name'] . "\n"
              . "Email: " . $_POST['email'] . "\n"
              . "Message:\n" . $_POST['message'];
    // Send the email
    mail($to, $subject, $mailbody, $headers);
    // Go to the thank you page
    header("location: thankyou.html");
    exit;

}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
     &lt;fieldset&gt;
         &lt;legend&gt;Contact Us&lt;/legend&gt;
         &lt;div class="row"&gt;
             &lt;label for="name"&gt;Name: &lt;/label&gt;
             &lt;input id="name" type="text" name="name" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="email"&gt;Email Address: &lt;/label&gt;
             &lt;input id="email" type="text" name="email" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="message"&gt;Message:&lt;/label&gt;
             &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;input type="submit" value="Submit"&gt;
         &lt;/div&gt;
     &lt;/fieldset&gt;
 &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Adding Form Validation</h2>

<p>Right now a user is able to submit a blank form and an email will still be sent.</p>

<p>We are going to add some server side validation so the form submission will only be accepted if the form is fully filled out.</p>

<p>We will also require the data entered in the email field to be a valid email address.</p>

<p>We will start by added a variable that we will use to store any validation error messages that we need to show to the user as well as a flag used to mark the form as failed validation.</p>

<p>Add the following to the top of the php code.</p>

<pre><code class="php">$valid = true;
$errors = array();
</code></pre>

<p>Next after the form is posted we will check that each field not empty.</p>

<p>Add the following code directly after the <code>if</code> and before email body is built.</p>

<pre><code class="php">if (empty($_POST['name'])) {
    $valid = false;
    $errors['name'] = "You must enter your name.";
}
if (empty($_POST['email'])) {
    $valid = false;
    $errors['email'] = "You must enter your email address.";
}
if (empty($_POST['message'])) {
    $valid = false;
    $errors['message'] = "You must enter a message.";
}
</code></pre>

<p>Now we need to only send the email if <code>$valid</code> is still true.  Wrap the email sending with a check to see if <code>$valid</code> is truthy.</p>

<p>The php code should now look like the following.</p>

<pre><code class="php">&lt;?php

$valid = true;
$errors = array();

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    if (empty($_POST['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($_POST['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    }
    if (empty($_POST['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $_POST['name'] . "\n"
                  . "Email: " . $_POST['email'] . "\n"
                  . "Message:\n" . $_POST['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
</code></pre>

<p>Note that I am using the <a href="http://us2.php.net/manual/en/function.empty.php">empty</a> function to check if the form field is not empty.
The empty function only checks if a value is falsey.  Since php is a loosely-typed language an empty string or even the string &ldquo;0&rdquo; will evaluate to false.
This means if the user enters the number <code>0</code> in a field the form validation will determine that the field is empty.
For this form that is fine as <code>0</code> is not valid entry for any of the fields we have but if we have a form field where 0 is a valid answer we could not use the <code>empty</code> function to validate that field.</p>

<p>Now we need to show these validation error messages to the user when they submit the form.</p>

<p>Add the following to the form right after the <code>&lt;legend&gt;</code> field.</p>

<pre><code class="php">&lt;?php if (!$valid): ?&gt;
    &lt;div class="error"&gt;
        &lt;?php foreach($errors as $message):?&gt;
            &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
        &lt;?php endforeach; ?&gt;
    &lt;/div&gt;
&lt;?php endif; ?&gt;
</code></pre>

<p>Now, when the user submits the form without filling out one or more of the fields no email will be sent and the messages will be shown to the user.</p>

<h3>Email Address Validation</h3>

<p>Since the main purpose of a contact form is to allow communication with users we need to make sure that the value entered in the email field is an email address rather then just checking if the field is not empty.</p>

<p>We will use the <a href="http://us2.php.net/manual/en/function.filter-input.php">filter_input</a> to validate the email address.</p>

<p>Change the validation for the email field to the following</p>

<pre><code class="php">if (empty($_POST['email'])) {
    $valid = false;
    $errors['email'] = "You must enter your email address.";
} elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
    $valid = false;
    $errors['email'] = "You must enter a valid email address.";
}
</code></pre>

<p>Our full contact.php page should now look like this.</p>

<pre><code class="php contact.php">&lt;?php

$valid = true;
$errors = array();

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    if (empty($_POST['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($_POST['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($_POST['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $_POST['name'] . "\n"
                  . "Email: " . $_POST['email'] . "\n"
                  . "Message:\n" . $_POST['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value=""&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="text" name="email" value=""&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>Repopulating the Form</h3>

<p>We are giving users messages telling them they need to fill out all of the fields but we still need to repopulate the form with the values they submitted.</p>

<p>There is little more annoying to users than filling out a form only to be told they did it wrong and being forced to do it all over again.</p>

<p>What if they spent time typing out a long message but forgot to fill out the name field?
They will once again be staring at a blank form.
They will more likely just leave rather than retype their message.</p>

<p>To repopulate the form we will need some variables to store the posted data in.</p>

<p>Add the following above the mail sending code.</p>

<pre><code class="php">$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);
</code></pre>

<p>This will initialize the variable so we don&rsquo;t have to check if the form was posted in the middle of our html.</p>

<p>Change the form fields to the following.</p>

<p>```php</p>

<div class="row">
    <label for="name">Name: </label>
    <input id="name" type="text" name="name" value="<?php echo htmlspecialchars($contact['name']);?>">
</div>


<div class="row">
    <label for="email">Email Address: </label>
    <input id="email" type="text" name="email" value="<?php echo htmlspecialchars($contact['email']);?>">
</div>


<div class="row">
    <label for="message">Message:</label>
    <textarea id="message" name="message"><?php echo htmlspecialchars($contact['message']);?></textarea>
</div>


<pre><code>
We are using [htmlspecialchars](http://us2.php.net/manual/en/function.htmlspecialchars.php) to escape the data to prevent [cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) attacks.

While we are on the subject of security we are also going to add some filtering to the input before sending the emails.
While we are sending plain text emails we don't want to trust that whatever email client is used to read the email wont try to do something like try to run something posted to the form.

Add the following code right before the form validation.
</code></pre>

<p>$contact = filter_input_array(INPUT_POST, array(
    &lsquo;name&rsquo;   => FILTER_SANITIZE_STRING,
    &lsquo;email&rsquo;   => FILTER_SANITIZE_STRING,
    &lsquo;message&rsquo;   => FILTER_SANITIZE_STRING,
), true);
```</p>

<p>Now anywhere in the validation or email sending code that references <code>$_POST</code> should be changed to <code>$contact</code></p>

<p><img src="/images/contact-form/part-2/validation.png" alt="Form Validation" /></p>

<h3>Using the posted email address as the Reply-To address</h3>

<p>Now that we have validated that the email address field contains an email address we can use the email address the user submitted as the Reply-To address for the email.
This will allow you to hit reply in your email client to send a reply directly to the user.</p>

<p>Change the <code>$headers</code> line to the following.</p>

<pre><code class="php">$headers = "From: website@example.com\r\n"
 . "Reply-To: " . $contact['email'] . "\r\n"
 . "X-Mailer: PHP/" . phpversion();
</code></pre>

<p> The full <code>contact.php</code> should now look like the following.</p>

<pre><code class="php contact.php">&lt;?php

$valid = true;
$errors = array();

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="text" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message"&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Summary</h2>

<p>We have added server-side form validation, input sanitation, repopulated the form on failed validation, and set the Reply-To header.</p>

<p>Next time we are going to add some client-side form validation to make the user experience a bit more pleasant.</p>

<p>We will also going to add some anti-spam protection to the form.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a simple contact form in PHP - Part 1]]></title>
    <link href="http://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-1/"/>
    <updated>2014-09-01T00:00:00-07:00</updated>
    <id>http://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-1</id>
    <content type="html"><![CDATA[<p>In this series we will be building a simple contact form in php.</p>

<p>It will cover sending emails and form validation.</p>

<!--more-->


<h2>Creating the Contact Form</h2>

<p>We will start with the form itself.</p>

<pre><code class="html contact.php">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
     &lt;fieldset&gt;
         &lt;legend&gt;Contact Us&lt;/legend&gt;
         &lt;div class="row"&gt;
             &lt;label for="name"&gt;Name: &lt;/label&gt;
             &lt;input id="name" type="text" name="name" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="email"&gt;Email Address: &lt;/label&gt;
             &lt;input id="email" type="text" name="email" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="message"&gt;Message:&lt;/label&gt;
             &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;input type="submit" value="Submit"&gt;
         &lt;/div&gt;
     &lt;/fieldset&gt;
 &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>We will also add a stylesheet with some basic styles for the form.</p>

<pre><code class="css styles.css">fieldset {
    margin:0 auto;
    width: 235px;
}
legend {
    font-weight:bold;
    font-size:125%;
}
form div.row {
    margin-bottom: 8px;
}
label {
    display: block;
    font-weight:bold;
}
input[type=text],input[type=email] {
    display:block;
    width: 400px;
}

textarea {
    width: 400px;
    height:200px;
}
</code></pre>

<p>If you view the page in a browser it should look something like this.</p>

<p><img src="/images/contact-form/part-1/contact-form.png" alt="Contact Form" /></p>

<p>Not the prettiest form but this isn&rsquo;t a design tutorial.
Feel free to add your own styles.</p>

<p>We also will need a page to send the user to after they submit the form.
This should have some sort of &ldquo;Thank you for submitting&rdquo; message on it.</p>

<pre><code class="html thankyou.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;Thank you for your message.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Sending an email on form post.</h2>

<p>We have a form but it doesn&rsquo;t do anything when the user submits it.</p>

<p>Add the following to the top of the contact.php page above the <code>&lt;!DOCTYPE html&gt;</code> line.</p>

<pre><code class="php contact.php">&lt;?php

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    // The email address the email will be sent to
    $to = "business@example.com";
    // The email subject
    $subject = "Contact Form Submission";
    // Set the from and reply-to address for the email
    $headers = "From: website@example.com\r\n"
             . "X-Mailer: PHP/" . phpversion();
    // Build the body of the email
    $mailbody = "The contact form has been filled out.\n\n"
              . "Name: " . $_POST['name'] . "\n"
              . "Email: " . $_POST['email'] . "\n"
              . "Message:\n" . $_POST['message'];
    // Send the email
    mail($to, $subject, $mailbody, $headers);
    // Go to the thank you page
    header("location: thankyou.html");
    exit;

}

?&gt;
</code></pre>

<p>The entire page should not look like this.</p>

<pre><code class="php contact.php">&lt;?php

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    // The email address the email will be sent to
    $to = "business@example.com";
    // The email subject
    $subject = "Contact Form Submission";
    // Set the from and reply-to address for the email
    $headers = "From: website@example.com\r\n"
             . "X-Mailer: PHP/" . phpversion();
    // Build the body of the email
    $mailbody = "The contact form has been filled out.\n\n"
              . "Name: " . $_POST['name'] . "\n"
              . "Email: " . $_POST['email'] . "\n"
              . "Message:\n" . $_POST['message'];
    // Send the email
    mail($to, $subject, $mailbody, $headers);
    // Go to the thank you page
    header("location: thankyou.html");
    exit;

}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
     &lt;fieldset&gt;
         &lt;legend&gt;Contact Us&lt;/legend&gt;
         &lt;div class="row"&gt;
             &lt;label for="name"&gt;Name: &lt;/label&gt;
             &lt;input id="name" type="text" name="name" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="email"&gt;Email Address: &lt;/label&gt;
             &lt;input id="email" type="text" name="email" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="message"&gt;Message:&lt;/label&gt;
             &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;input type="submit" value="Submit"&gt;
         &lt;/div&gt;
     &lt;/fieldset&gt;
 &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>How does it work?</h3>

<p>First we are checking if each of the form fields have been posted.
If they exist the user has submitted the form.</p>

<pre><code class="php">if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
</code></pre>

<p>Next we define where we would like the email to be sent and what the subject of the email should be.<br/>
Change the <code>$to</code> variable to your own email address.</p>

<pre><code class="php">// The email address the email will be sent to
$to = "business@example.com";
// The email subject
$subject = "Contact Form Submission";
</code></pre>

<p>The headers set the email address used for the from in the email.
The other line indicates the application used to send the email.  In this case php.</p>

<pre><code class="php">// Set the from and reply-to address for the email
$headers = "From: website@example.com\r\n"
         . "X-Mailer: PHP/" . phpversion();
</code></pre>

<p>We now need to build the body of the email itself.
It should include each of the posted values.</p>

<pre><code class="php">// Build the body of the email
$mailbody = "The contact form has been filled out.\n\n"
          . "Name: " . $_POST['name'] . "\n"
          . "Email: " . $_POST['email'] . "\n"
          . "Message:\n" . $_POST['message'];
</code></pre>

<p>Next we use the <a href="http://us3.php.net/manual/en/book.mail.php">php mail</a> function to actually send the email.</p>

<pre><code class="php">// Send the email
mail($to, $subject, $mailbody, $headers);
</code></pre>

<p>Finally we send the user to the thankyou.html page that we created.</p>

<pre><code class="php">// Go to the thank you page
header("location: thankyou.html");
exit;
</code></pre>

<h2>Improving the script</h2>

<p>While this script would work as is for your contact form it have a number of problems with it.</p>

<p>The biggest one is that there is no form validation.<br/>
A user can submit a blank form and it will send the email and redirect to the thankyou.html page anyway.</p>

<p>The data the user is submitting is not being escaped or filtered.<br/>
We only want plain text being submitted through the form but without any enforcement of that the user can submit anything including scripts that might cause security issues with certain email clients.</p>

<p>There is nothing to help prevent spam.<br/>
Once a spam-bot finds this script you could find your inbox full of worthless junk.</p>

<p>In the next part I will tackle some of these issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secure Password Hashing with PHP]]></title>
    <link href="http://www.thedevfiles.com/2014/08/secure-password-hashing/"/>
    <updated>2014-08-22T00:00:00-07:00</updated>
    <id>http://www.thedevfiles.com/2014/08/secure-password-hashing</id>
    <content type="html"><![CDATA[<p>There is a lot of misinformation and uncertainty on the topic of password storage.</p>

<p>There are massive amounts of tutorials and articles recommending all manor of methods of storing passwords.
A large number of these are old and using methods that just are up to snuff for todays security standards.</p>

<!--more-->


<h2>Common password storing mistakes</h2>

<p>Here are some of the most common mistakes make with regards to password hashing.</p>

<p>I&rsquo;ve been guilty of all of these in the past.</p>

<h3>MD5 and SHA1 hashing</h3>

<p>The <a href="http://us1.php.net/manual/en/function.md5.php">md5</a> and <a href="http://us1.php.net/manual/en/function.sha1.php">sha1</a> are not suitable for password hashing.</p>

<p>This is true for any of the related hashing algorithms from the <a href="http://us1.php.net/manual/en/function.hash.php">hash</a> function like sha256, sha512, and so on.
While the larger hashes are slightly better than the shorter ones they all suffer from the same problem.</p>

<p>Over time computers are getting faster and faster and can calculate a hash in a shorter amount of time.
A high end machine with a cluster of GPUs can calculate billions of md5 hashes a second.
You can rent such a machine from <a href="http://aws.amazon.com/ec2/pricing/">Amazon</a> for less than $1 an hour.</p>

<p>Over time each of these hashing functions will become faster and faster to break.</p>

<p>The other weakness of these algorithms is that unless the passwords are also salted they are susceptible to rainbow table attacks.</p>

<p>Every time a password is hashed it will result in the same hash.
This means if you have a list of hashes and their corresponding passwords you can just find the hash in the list to break the password.</p>

<h3>Trying to create your own hashing algorithm</h3>

<p>People have tried to get around the fast hashing algorithms by running them multiple times or trying to mix and match them to create their own hashing algorithm.</p>

<p>The problem is that the hashes can be calculated so fast that it would take thousands of hashes to make a difference.
Even then at time moves on computers will get even faster and the number of necessary hashes will just keep increasing.</p>

<h3>Using the same salt for all passwords</h3>

<p>Using the same salt for all passwords is much better then not using a salt at all.</p>

<p>Every password should have its own salt.</p>

<h2>The Solution</h2>

<p>So how should passwords be hashed?</p>

<ol>
<li>Each password needs to be salted with a different cryptographic salt.</li>
<li>The hashing algorithm must not be fast regardless of the power of the machine used to generate them.</li>
</ol>


<p>The current recommended methods for securely hashing passwords are <a href="http://en.wikipedia.org/wiki/Bcrypt">Bcrypt</a> or <a href="http://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a>.</p>

<p>The Bcrypt algorithm can be used with the <a href="http://us1.php.net/manual/en/function.crypt.php">crypt</a> function but this isn&rsquo;t very easy to use.
You still need to generate a cryptographic salt and that isn&rsquo;t very easy either.</p>

<p>Thankfully there is now a better way.</p>

<p>PHP 5.5 added the <a href="http://php.net/manual/en/function.password-hash.php">password_hash</a> function which hides the ugliness of using the crypt function and makes secure password hashing truly easy.</p>

<p>Not using PHP 5.5+?  The <a href="https://github.com/ircmaxell/password_compat">ircmaxell/password_compat</a> library will add the same functionality to PHP 5.3.7+.</p>

<p>Even better? The password_hash function is future proof.  While Bcrypt is the best algorithm available to PHP for hashing passwords this may not always be the case.
As better algorithms are released the password_hash function will automatically use the best algorithm available.</p>

<p>Your application will begin to use the newer more secure algorithm without you even touching the code.</p>

<h2>Using password_hash for password hashing</h2>

<p>For this example I&rsquo;m assuming you have a database table called users with a username and a password column.</p>

<p>I&rsquo;m also using PDO for the database interactions.
If you need help using PDO take a look at the article I wrote about <a href="/2014/08/moving-from-mysql-query-to-pdo/">Migrating from mysql_query to PDO</a>.
Make sure to use prepared statements to prevent SQL injection.</p>

<pre><code class="php">&lt;?php

class UserModel
{

    /**
     * @var PDO
     */
    protected $dbh;

    /**
     * @param PDO $dbh
     */
    public function __construct(PDO $dbh)
    {
        $this-&gt;dbh = $dbh;
    }

    /**
     * Checks account credentials
     *
     * @param string $username
     * @param string $password
     *
     * @return array|false Array of user data if credentials are correct or boolean false if credentials are not correct
     */
    public function checkCredentials($username, $password)
    {
        $user = $this-&gt;getUserByUsername($username);
        if (!$user) {
            // No user found with provided username
            return false;
        }
        if (!password_verify($password, $user['password'])) {
            // Password does not match
            return false;
        }
        if (password_needs_rehash($user['password'], PASSWORD_DEFAULT)) {
            // This password was hashed using an older algorithm, update with new hash.
            $this-&gt;updatePassword($user['id'], $password);
        }
        // The password is no longer needed from the user data
        unset($user['password']);
        return $user;
    }

    /**
     * Returns a user by username
     *
     * @param string $username
     *
     * @return array|false Array of user data if found or boolean false if not found
     */
    public function getUserByUsername($username)
    {
        $sth = $this-&gt;dbh-&gt;prepare("SELECT * FROM users WHERE username LIKE :username");
        $sth-&gt;bindValue(":username", $username);
        $sth-&gt;execute();
        return $sth-&gt;fetch(PDO::FETCH_ASSOC);
    }

    /**
     * Updates a user's password
     *
     * @param int $id
     * @param string $password
     *
     * @return int Number of affected rows
     */
    public function updatePassword($id, $password)
    {
        $hash = password_hash($password, PASSWORD_DEFAULT);
        $sth = $this-&gt;dbh-&gt;prepare("UPDATE users SET password = :password WHERE id = :id");
        $sth-&gt;bindValue(":password", $hash);
        $sth-&gt;bindValue(":id", $id, PDO::PARAM_INT);
        return $sth-&gt;execute();
    }
}
</code></pre>

<h3>How it works</h3>

<ol>
<li>You pass the username and password the user provided in the login form to the checkCredentials method.</li>
<li>This method searches the database for a user with a matching username.</li>
<li>If no user is found the provided username was incorrect.</li>
<li>Next the <a href="http://php.net/manual/en/function.password-verify.php">password_verify</a> is called to check if the password was used to generate the hash that was stored in the database for the user with the matching username.</li>
<li>If it returns false then the provided password was incorrect.</li>
<li>Now that we have confirmed the provided login credentials are correct we pass the hashed password from the database to <a href="http://php.net/manual/en/function.password-needs-rehash.php">password_needs_rehash</a>.  This checks if the password needs to be upgraded to a newer, stronger algorithm.</li>
<li>If it returns true update the user&rsquo;s password by passing the provided password to the <a href="http://php.net/manual/en/function.password-hash.php">password_hash</a> function.</li>
<li>Return the user account so you can log the user in.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplifying database interactions with Doctrine DBAL]]></title>
    <link href="http://www.thedevfiles.com/2014/08/simplifying-database-interactions-with-doctrine-dbal/"/>
    <updated>2014-08-15T00:00:00-07:00</updated>
    <id>http://www.thedevfiles.com/2014/08/simplifying-database-interactions-with-doctrine-dbal</id>
    <content type="html"><![CDATA[<p>I previously wrote about <a href="/2014/08/moving-from-mysql-query-to-pdo">switching from the mysql extension to PDO</a>.
PDO introduces a number of convenient features beyond the mysql extension such as transactions, prepared statements, and more fetching options.
However there are still a few things that are a bit painful.</p>

<p>This article will introduce <a href="http://www.doctrine-project.org/projects/dbal.html">Doctrine DBAL</a> to help alleviate some of these pain points.</p>

<p><abbr title="Doctrine database abstraction &amp; access layer">Doctrine DBAL</abbr> is a wrapper around <a href="http://php.net/manual/en/book.pdo.php">PDO</a>.
It adds a few conveniences beyond straight PDO as well as a query builder.</p>

<!--more-->


<p>There are a <a href="http://www.doctrine-project.org/projects.html">number of projects</a> under the Doctrine umbrella including a full <abbr title="Object Relational Mapper">ORM</abbr>.
This article will only cover the DBAL project.</p>

<h2>Installing Doctrine DBAL</h2>

<p>The recommended way to install Doctrine DBAL is via <a href="https://getcomposer.org/">composer</a>.</p>

<pre><code class="json Add to the composer.json require section">"doctrine/dbal": "2.3.4"
</code></pre>

<p>Alternatively you can download a zip archive from the <a href="http://www.doctrine-project.org/projects/dbal.html">project page</a>.</p>

<p>If you aren&rsquo;t using composer or don&rsquo;t have a PSR-0 compatible autoloader you will need to add the class loader in the Doctrine/Common folder to load the Doctrine DBAL classes.</p>

<pre><code class="php Setup Class Loader http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/introduction.html">use Doctrine\Common\ClassLoader;

require '/path/to/doctrine/lib/Doctrine/Common/ClassLoader.php';

$classLoader = new ClassLoader('Doctrine', '/path/to/doctrine');
$classLoader-&gt;register();
</code></pre>

<h2>Connecting to The Database</h2>

<p>Doctrine DBAL can connect to any type of database that PDO can connect to.
For this article I am going to assume you are connecting to MySQL but the api is the same regardless of the database you are connecting to.</p>

<pre><code class="php Connecting to the database http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#">$config = new \Doctrine\DBAL\Configuration();

$connectionParams = array(
    'dbname' =&gt; 'database',
    'user' =&gt; 'user',
    'password' =&gt; 'password',
    'host' =&gt; 'localhost',
    'port' =&gt; 3306,
    'charset' =&gt; 'utf8',
    'driver' =&gt; 'pdo_mysql',
);
$dbh = \Doctrine\DBAL\DriverManager::getConnection($connectionParams, $config);
</code></pre>

<p>One advantage that Doctrine DBAL has over plain PDO is that the Doctrine connection doesn&rsquo;t actually connect to the database until the first query is run.
This means you can create the connection in the bootstrap of your application and if no queries are run for a particular request it wont need to actually connect to the database server.
PDO connects to the database server as soon as you create a PDO instance.</p>

<h2>Running Queries</h2>

<p>Being a wrapper around PDO you can use the full PDO api including prepared statements and transactions just like you would with straight PDO.</p>

<p>Fetching Data works exactly the same as with straight PDO.</p>

<pre><code class="php Fetching Data http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#fetchall">// Fetch one row
$sth = $dbh-&gt;query("SELECT * FROM users WHERE id = 1");
$user = $sth-&gt;fetch();

// Fetch all rows
$sth = $dbh-&gt;query("SELECT * FROM users");
$users = $sth-&gt;fetchAll();

// Fetch column as scalar value
$sth = $dbh-&gt;query("SELECT email FROM users WHERE id = 1");
$email = $sth-&gt;fetchColumn();

// Fetch column as array of scalar values
$sth = $dbh-&gt;query("SELECT email FROM users");
$emails = $sth-&gt;fetchAll(PDO::FETCH_COLUMN);

// Fetch column as key value pairs
$sth = $dbh-&gt;query("SELECT id, email FROM users");
$users = $sth-&gt;fetchAll(PDO::FETCH_KEY_PAIR);
</code></pre>

<p>Prepared statements are also the same as straight PDO.</p>

<pre><code class="php Prepared Statements http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#using-prepared-statements">$sth = $dbh-&gt;prepare("SELECT * FROM users WHERE id = ?");
$sth-&gt;bindValue(1, $id, PDO::PARAM_INT);
$sth-&gt;execute();
$user = $sth-&gt;fetchAssoc();

$sth = $dbh-&gt;prepare("UPDATE users SET name = :name, email = :email WHERE id = :id");
$sth-&gt;bindeValue(":name", $name);
$sth-&gt;bindeValue(":email", $email);
$sth-&gt;bindeValue(":id", $id, PDO::PARAM_INT);
$sth-&gt;execute();
</code></pre>

<p>With Doctrine DBAL you can combine preparing and executing into one step.</p>

<pre><code class="php Preparing and Executing in one command">$sth = $conn-&gt;executeQuery('SELECT * FROM users WHERE email = ?', array('email@excample.com'));
$user = $sth-&gt;fetch();

// executeUpdate will return the number of affected rows
$count = $dbh-&gt;executeUpdate("UPDATE users SET name = ?, email = ? WHERE id = ?", array($name, $email, $id));
// Same with named parameters
$count = $dbh-&gt;executeUpdate("UPDATE users SET name = :name, email = :email WHERE id = :id", array('name' =&gt; $name, 'email' =&gt; $email, 'id' =&gt; $id));

// You can even prepare, execute, and fetch in one step
$users = $dbh-&gt;fetchAll("SELECT * FROM users WHERE name LIKE ?", array($name . '%'));
</code></pre>

<h2>Inserts, Updates, and Deletes</h2>

<p>With Doctrine DBAL you don&rsquo;t even need to write sql for inserts, updates, and deletes.</p>

<pre><code class="php Inserts http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#insert">// Insert a new user into the users table
$dbh-&gt;insert('users', array('name' =&gt; 'Bob', 'email' =&gt; 'bob@example.com'));
// This is the same as running the following query
// INSERT INTO users (name, email) VALUES ('Bob', 'bob@example.com')
</code></pre>

<pre><code class="php Updates http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#update">$dbh-&gt;update('users', array('name' =&gt; 'Bob'), array('id' =&gt; 1));
// This is the same as running the following query
// UPDATE users SET name = 'Bob' WHERE id = 1
</code></pre>

<pre><code class="php Deletes http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#delete">$dbh-&gt;delete('users', array('id' =&gt; 1));
// This is the same as running the following query
// DELETE FROM users WHERE id = 1
</code></pre>

<h2>Query Builder</h2>

<p>Doctrine DBAL also features a <a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html">query builderr</a> to help build complicated SQL queries.</p>

<pre><code class="php Query Builder http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html">// This will run the following query
/*
SELECT u.id, u.name, u.email, p.bio
FROM users u
INNER JOIN user_profile p ON (u.id = p.user_id)
WHERE u.id = 1
ORDER BY u.name ASC
*/
$id = 1;
$query = $dbh-&gt;createQueryBuilder();
$query-&gt;select('u.id', 'u.name', 'u.email', 'p.bio')
      -&gt;from('users', 'u')
      -&gt;innerJoin('u', 'user_profile', 'p', 'u.id = p.user_id')
      -&gt;orderBy('u.name', 'ASC')
      -&gt;where('u.id = :id')
      -&gt;setParameter(':id', $id)
;
$sth = $query-&gt;execute();
$user = $sth-&gt;fetchAssoc();
</code></pre>

<p>Where I find the query builder to be the most helpful is when you have parts of the query that are dependent on user provided data.</p>

<p>For example imagine a page with a search form with multiple fields that filter results by different columns.<br/>
You might have a text field to search the names of users and another text field to search by email address.<br/>
There is also a select box to search by account type with the values Any, Editors, and Members.<br/>
If Any is selected you do not want to filter by account type but if Editors or Members is selected you do.<br/>
With the other fields you only want to filter them if the user entered anything in the fields.
You always only want to return active accounts.</p>

<pre><code class="php">// User provided search data
$search = array(
  'name' =&gt; 'Bob',
  'email' =&gt; null,
  'type' =&gt; 'any'
);

// Query That should be run
// SELECT * FROM users WHERE name LIKE '%Bob%'
</code></pre>

<pre><code class="php">// User provided search data
$search = array(
  'name' =&gt; 'Bob',
  'email' =&gt; 'email@example.com',
  'type' =&gt; 'member'
);

// Query That should be run
// SELECT * FROM users WHERE active = 1 AND name LIKE '%Bob%' AND email LIKE '%email@example.com%' AND type = 'member' ORDER BY name ASC
</code></pre>

<p>With straight SQL the only way to build this query is with string concatenation.</p>

<pre><code class="php Building query with string concatenation and PDO">$where = array("active = 1");
if ($search['name']) {
    $where[] = "name LIKE :name";
}
if ($search['email']) {
    $where[] = "email LIKE :email";
}
if ($search['type'] != 'any') {
    $where[] = "type = :type";
}
if ($where) {
    $where = implode(" AND ", $where);
} else {
    $where = '';
}

$sql = "SELECT * FROM users WHERE " . $where . " ORDER BY name ASC";
$sth = $dbh-&gt;prepare($sql);
if ($search['name']) {
    $sth-&gt;bindValue(':name', "%" . $search['name'] . "%");
}
if ($search['email']) {
    $sth-&gt;bindValue(':email', "%" . $search['email'] . "%");
}
if ($search['type'] != 'any') {
    $sth-&gt;bindValue(':type', $search['type']);
}
$sth-&gt;execute();
$users = $sth-&gt;fetchAll(PDO::FETCH_ASSOC);
</code></pre>

<p>This example is actually pretty simple and the code is already difficult to understand.</p>

<p>Lets look at the same example using the query builder</p>

<pre><code class="php Using the query builder">$query = $dbh-&gt;createQueryBuilder();
$query-&gt;select('*');
$query-&gt;from('users');
$query-&gt;where("active = 1");
if ($search['name']) {
    $query-&gt;andWhere('name LIKE :name');
    $query-&gt;setParameter(':name', "%" . $search['name'] . "%");
}
if ($search['email']) {
    $query-&gt;andWhere('email LIKE :email');
    $query-&gt;setParameter(':email', "%" . $search['email'] . "%");
}
if ($search['type'] != 'any') {
    $query-&gt;andWhere('type = :type');
    $query-&gt;setParameter(':type', $search['type']);
}
$query-&gt;orderBy('name', 'ASC');
$sth = $query-&gt;execute();
$users = $sth-&gt;fetchAll(PDO::FETCH_ASSOC);
</code></pre>

<p>Not only is that code shorter but if you read it out loud it even sounds more like English.<br/>
This greatly helps at understanding what the code does at a glance 6 months later.</p>

<p>The query builder does result in some extra overhead as it needs to compile the query so raw SQL is generally a better idea if the query is simple.</p>

<h2>Conclusion</h2>

<p>Doctrine DBAL adds a lot of functionality for a very lightweight overhead.
Even if you don&rsquo;t use the query builder it is worth it for the shorter syntax on inserts, updates, and deletes as well as the ability to prepare, execute, and fetch data in one statement.</p>

<p>There is a lot more functionality I didn&rsquo;t cover so I recommend taking a look at <a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/index.html">the documentationn</a>
for other pieces of functionality such as events, a schema manager, caching, sharding, and more.</p>
]]></content>
  </entry>
  
</feed>
