<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[The Dev Files]]></title>
    <link href="https://www.thedevfiles.com/category/Tutorial.xml" rel="self"/>
    <link href="https://www.thedevfiles.com/"/>
    <updated>2018-10-13T13:52:50-07:00</updated>
    <id>https://www.thedevfiles.com/</id>
            <author>
            <name><![CDATA[Jonathan Bernardi]]></name>            <email><![CDATA[jon@jonbernardi.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Building a simple contact form in PHP - Part 5]]></title>
            <link href="https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-5/"/>
            <updated>2014-09-05T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-5/</id>
            <summary><![CDATA[Using Swift to send email notifications on contact form submissions.]]></summary>            <content type="html"><![CDATA[<p>In of <a href="/2014/09/building-a-simple-contact-form-in-php-part-4/">part 4</a> of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1/">Building a simple contact form in PHP</a> we added a CAPCHA field to help reduce spam.</p>

<p>In this part we are going to change the sending of the mail to use SMTP by using <a href="http://swiftmailer.org/">Swift Mailer</a>, a php mailing library.</p>

<!--more-->

<p>As we left it our contact form looked like this.</p>

<pre><code class="php">&lt;?php

require_once(__DIR__ . '/recaptcha-php-1.11/recaptchalib.php');

$valid = true;
$errors = array();
$captchaerror = null;

// Load config file
$config = include(__DIR__ . '/config.php');

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['recaptcha_challenge_field'],$_POST['recaptcha_response_field'])) {
    $resp = recaptcha_check_answer(
        $config['recaptcha']['privatekey'],
        $_SERVER["REMOTE_ADDR"],
        $_POST["recaptcha_challenge_field"],
        $_POST["recaptcha_response_field"]
    );

    if (!$resp-&gt;is_valid) {
        $captchaerror = $resp-&gt;error;
        $valid = false;
        $errors['captcha'] = "Entered text did not match.";
    }

    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }

    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required data-parsley-required-message="You must enter your name."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required data-parsley-required-message="You must enter your email address." parsley-type-email-message="You must enter a valid email address."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message" required data-parsley-required-message="You must enter a message."&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;?php echo recaptcha_get_html($config['recaptcha']['publickey'], $captchaerror); ?&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;

        &lt;/fieldset&gt;
    &lt;/form&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2 id="add-the-smtp-credentials-to-your-configuration-file">Add the SMTP credentials to your configuration file</h2>

<pre><code class="php">"mail" =&gt; array(
    "type" =&gt; "smtp",
    "server" =&gt; "smtp.gmail.com",
    "port" =&gt; 587,
    "auth" =&gt; true,
    "username" =&gt; "email@gmail.com",
    "password" =&gt; "yourgmailpassword"
)
</code></pre>

<p>I am using a gmail account as an example.  Change the server, port, username, and password to whatever the settings for your email account are.</p>

<h2 id="adding-the-swiftmailer-library">Adding the Swiftmailer library</h2>

<p>Head over to the <a href="https://github.com/swiftmailer/swiftmailer/releases">releases page</a> for the <a href="https://github.com/swiftmailer/swiftmailer">github repository for the project</a> and download the newest release (5.2.1 at the time of writing this).</p>

<p>Unzip the archive in your project folder.  After that I have a folder named <code>swiftmailer-5.2.1</code> in my project folder that contains a <code>lib</code> folder with the libraries in it.</p>

<p>Now include the library at the top of your <code>contact.php</code> page.</p>

<pre><code class="php">require_once(__DIR__ . '/swiftmailer-5.2.1/lib/swift_required.php');
</code></pre>

<p>Replace the line that calls the <code>mail</code> function with the following.
You can also delete the <code>$headers</code> variable as that is no longer needed.</p>

<pre><code class="php">// Create the mail
$mail = Swift_Message::newInstance();
$mail-&gt;setSubject($subject);
$mail-&gt;setFrom(array($from));
$mail-&gt;setTo(array($to));
$mail-&gt;setReplyTo(array($contact['email'] =&gt; $contact['name']));
$mail-&gt;setBody($mailbody);
// Create the mail transport
if ($config['mail']['type'] == 'smtp') {
    // Use smtp account
    $transport = Swift_SmtpTransport::newInstance($config['mail']['server'], $config['mail']['port']);
    if ($config['mail']['auth']) {
        $transport-&gt;setUsername($config['mail']['username']);
        $transport-&gt;setPassword($config['mail']['password']);
    }
} else {
    // Use mail function as fallback
    $transport = Swift_MailTransport::newInstance();
}
// Create a mailer
$mailer = Swift_Mailer::newInstance($transport);
// Send the mail
$result = $mailer-&gt;send($mail);
</code></pre>

<p>Lets break this down a bit.</p>

<pre><code class="php">// Create the mail
$mail = Swift_Message::newInstance();
$mail-&gt;setSubject($subject);
$mail-&gt;setFrom(array($from));
$mail-&gt;setTo(array($to));
$mail-&gt;setReplyTo(array($contact['email'] =&gt; $contact['name']));
$mail-&gt;setBody($mailbody);
</code></pre>

<p>This code creates the mail itself as an instance of <code>Swift_Message</code>.
It sets the subject, to, from, and reply-to addresses as well as the mail body.
This should be apparent fairly easily just by reading the method names.</p>

<pre><code class="php">// Create the mail transport
if ($config['mail']['type'] == 'smtp') {
    // Use smtp account
    $transport = Swift_SmtpTransport::newInstance($config['mail']['server'], $config['mail']['port']);
    if ($config['mail']['auth']) {
        $transport-&gt;setUsername($config['mail']['username']);
        $transport-&gt;setPassword($config['mail']['password']);
    }
} else {
    // Use mail function as fallback
    $transport = Swift_MailTransport::newInstance();
}
</code></pre>

<p>We are checking if we have set the mail transport type to smtp in our config file.
If we have we create an instance of Swift_SmtpTransport passing in the credentials and server information we have in our config file.
Otherwise we create an instance of Swift_MailTransport which is a wrapper around the php <a href="http://us1.php.net/manual/en/function.mail.php">mail</a> function we were using previously.</p>

<pre><code class="php">// Create a mailer
$mailer = Swift_Mailer::newInstance($transport);
// Send the mail
$result = $mailer-&gt;send($mail);
</code></pre>

<p>The <code>Swift_Mailer</code> actually does the sending of the <code>Swift_Message</code> we created using the transport.</p>

<p>Our full <code>contact.php</code> page should now look like the following</p>

<pre><code class="php">&lt;?php

require_once(__DIR__ . '/recaptcha-php-1.11/recaptchalib.php');
require_once(__DIR__ . '/swiftmailer-5.2.1/lib/swift_required.php');

$valid = true;
$errors = array();
$captchaerror = null;

// Load config file
$config = include(__DIR__ . '/config.php');

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['recaptcha_challenge_field'],$_POST['recaptcha_response_field'])) {
    $resp = recaptcha_check_answer(
        $config['recaptcha']['privatekey'],
        $_SERVER["REMOTE_ADDR"],
        $_POST["recaptcha_challenge_field"],
        $_POST["recaptcha_response_field"]
    );

    if (!$resp-&gt;is_valid) {
        $captchaerror = $resp-&gt;error;
        $valid = false;
        $errors['captcha'] = "Entered text did not match.";
    }

    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = $config['contact']['to'];
        // Set the from address for the email
        $from = $config['contact']['from'];
        // The email subject
        $subject = "Contact Form Submission";
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Create the mail
        $mail = Swift_Message::newInstance();
        $mail-&gt;setSubject($subject);
        $mail-&gt;setFrom(array($from));
        $mail-&gt;setTo(array($to));
        $mail-&gt;setReplyTo(array($contact['email'] =&gt; $contact['name']));
        $mail-&gt;setBody($mailbody);
        // Create the mail transport
        if ($config['mail']['type'] == 'smtp') {
            // Use smtp account
            $transport = Swift_SmtpTransport::newInstance($config['mail']['server'], $config['mail']['port']);
            if ($config['mail']['auth']) {
                $transport-&gt;setUsername($config['mail']['username']);
                $transport-&gt;setPassword($config['mail']['password']);
            }
        } else {
            // Use mail function as fallback
            $transport = Swift_MailTransport::newInstance();
        }
        // Create a mailer
        $mailer = Swift_Mailer::newInstance($transport);
        // Send the mail
        $result = $mailer-&gt;send($mail);

        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required data-parsley-required-message="You must enter your name."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required data-parsley-required-message="You must enter your email address." parsley-type-email-message="You must enter a valid email address."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message" required data-parsley-required-message="You must enter a message."&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;?php echo recaptcha_get_html($config['recaptcha']['publickey'], $captchaerror); ?&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre>

<h3 id="other-features-of-swiftmailer">Other features of Swiftmailer</h3>

<p>Swiftmailer has a lot more functionality than we are using for our application.</p>

<p>It can send html and/or multipart emails.
It can send attachments and inline/embeded images.
It have more transports than just the <code>smtp</code> and <code>mail</code> as well.</p>

<p>I suggest taking a look at the <a href="http://swiftmailer.org/docs/introduction.html">documentation </a> for more on what it can do.</p>

<h2 id="using-a-transactional-email-service">Using a transactional email service</h2>

<p>Now that we are using a mailing library that supports SMTP we can use a transactional email service like <a href="https://mandrill.com/">Mandrill</a> or <a href="http://www.mailgun.com/">Mailgun</a> to handle the email sending.</p>

<p>There are a number of advantages to using a transactional email service rather than just using a normal email account over SMTP or the server itself with the <code>mail</code> function.</p>

<p>These services are built for the enterprise and can handle large volumes of email and have very high uptime.  Your email account on your <a href="http://cpanel.net/">cPanel</a> shared hosting account isn't.
Even beefier solutions like <a href="http://office.microsoft.com/en-us/exchange/">Exchange</a> or <a href="http://www.google.com/enterprise/apps/business/index.html">Google Apps for Business</a> are built more for people than web applications.</p>

<p>They tend to be very affordable.
<a href="https://mandrill.com/pricing/">Mandrill</a> gives you 12,000 emails a month for free and <a href="http://www.mailgun.com/">Mailgun</a> gives you 10,000.  <a href="http://aws.amazon.com/ses/pricing/">Amazon SES</a> charges $0.10 per thousand emails.
This means unless you are sending tens of thousands of emails a month you wont have to pay a thing and even if you are it will only be a couple dollars a month.</p>

<p>Transaction services generally give you great reporting including things like bounce rates, open rates, and even logs of every email sent through the service.
This alone in enough to make it worth using even for small sites that don't send out much.</p>

<h3 id="setting-up-the-transactional-email-service">Setting up the transactional email service</h3>

<p>I'm going to be using <a href="https://mandrill.com/">Mandrill</a> as en example but you can use any service you want.</p>

<p>The first step is obviously to sign up for the service.</p>

<p>The next step is to get the SMTP credentials for the account.
For Mandrill you can find this under <code>Settings</code>.</p>

<p>For Mandrill they will look something like this.</p>

<table>
<thead>
<tr>
  <th></th>
  <th></th>
</tr>
</thead>
<tbody>
<tr>
  <td>Host</td>
  <td>smtp.mandrillapp.com</td>
</tr>
<tr>
  <td>Port</td>
  <td>587</td>
</tr>
<tr>
  <td>SMTP Username</td>
  <td>emailaddress</td>
</tr>
<tr>
  <td>SMTP Password</td>
  <td>any valid API key</td>
</tr>
</tbody>
</table>

<p>You can generate an API Key at the bottom of the same page.</p>

<p>Next edit the mail section of the <code>config.php</code> page like the following.</p>

<pre><code class="php">"mail" =&gt; array(
    "type" =&gt; "smtp",
    "server" =&gt; "smtp.mandrillapp.com",
    "port" =&gt; 587,
    "auth" =&gt; true,
    "username" =&gt; "youremailaddress",
    "password" =&gt; "yourapikey"
  )
</code></pre>

<p>That is all you have to do.  No code changes are necessary.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Building a simple contact form in PHP - Part 4]]></title>
            <link href="https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-4/"/>
            <updated>2014-09-04T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-4/</id>
            <summary><![CDATA[Adding a reCAPTCHA field to a php contact form]]></summary>            <content type="html"><![CDATA[<p>In of <a href="/2014/09/building-a-simple-contact-form-in-php-part-3/">part 3</a> of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1/">Building a simple contact form in PHP</a> we added client-side validation to our form.</p>

<p>In this part we are going to add a <a href="http://en.wikipedia.org/wiki/Captcha">CAPTCHA</a> field to the form in order to reduce spam.</p>

<!--more-->

<p>We have validation to help prevent blank form submissions but there is still nothing to stop spam bots from sending a bunch of junk posts via some automated script.</p>

<p>A common way of reducing spam is by adding a <a href="http://en.wikipedia.org/wiki/Captcha">CAPTCHA</a> field to the form.
These are those fields with the distorted random characters that you need to copy in order to submit the form.
They can be annoying but they are pretty effective at stopping automated spam submissions.</p>

<p>We are going to use the <a href="https://www.google.com/recaptcha/intro/index.html">reCAPTCHA</a> service and library to implement this CAPTCHA field.</p>

<p>As we left it our contact form looked like the following.</p>

<pre><code class="php">&lt;?php

$valid = true;
$errors = array();

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required data-parsley-required-message="You must enter your name."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required data-parsley-required-message="You must enter your email address." parsley-type-email-message="You must enter a valid email address."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message" required data-parsley-required-message="You must enter a message."&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2 id="adding-recaptcha-to-the-form">Adding reCAPTCHA to the form</h2>

<p>The first step is to go to the reCAPTCHA website and sign up for the service.
You will need a Google account to sign up.</p>

<p>Once you sign up you should receive a public and a private API key.
Save these as you will need them later.</p>

<p>Once you have an account and your api keys download the php sdk library from <a href="https://code.google.com/p/recaptcha/downloads/list?q=label:phplib-Latest">the project site</a> and unzip it in your project folder.</p>

<h3 id="storing-the-api-keys">Storing the api keys</h3>

<p>We can of course just put the api keys right in the script that needs them but there are advantages to creating a separate configuration file to store things like settings and credentials for our application.</p>

<p>The problem with putting the configuration directly in the contact.pp script is that while we only have one form that needs a reCAPTCHA now what happens if need to add more later?
We just put the api keys in that file as well.
Then what happens when those keys need to change?
We would have to open every page that uses them to change it.</p>

<p>It is a lot easier to have them stored in once place no matter how many times we need them.</p>

<p>This becomes even more important with things like database credentials that are used much more often.</p>

<p>One of the key principals of software development is <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">Don't repeat yourself</a>.</p>

<p>We are also going to use this configuration file to store the <code>To</code> and <code>From</code> address we are using for our email.</p>

<p>Create a file named <code>config.php</code> in the same directory as the <code>contact.php</code> page with the following content.</p>

<pre><code class="php">&lt;?php
return array(
  "recaptcha" =&gt; array(
    "publickey" =&gt; "paste-your-pulic-key-here",
    "privatekey" =&gt; "paste-your-private-key-here"
  ),
  "contact" =&gt; array(
    "to" =&gt; "business@example.com",
    "from" =&gt; "website@example.com"
  ),
);
</code></pre>

<p>Replace the values with your own reCAPTCHA keys and the <code>to</code> and <code>from</code> email addresses with the ones you have been using previously.</p>

<p>Now add the following to your contact.php page.</p>

<pre><code class="php">// Load config file
$config = include(__DIR__ . '/config.php');
</code></pre>

<p>This will load the configuration values into a <code>$config</code> array.</p>

<p>Change the initialization of the variables we are using to send the email to the following</p>

<pre><code class="php">// The email address the email will be sent to
$to = $config['contact']['to'];
// Set the from address for the email
$from = $config['contact']['from'];
// The email subject
$subject = "Contact Form Submission";
// Set the from and reply-to address for the email
$headers = "From: " . $from . "\r\n"
         . "Reply-To: " . $contact['email'] . "\r\n"
         . "X-Mailer: PHP/" . phpversion();
</code></pre>

<h3 id="adding-the-recaptcha-field">Adding the reCAPTCHA field</h3>

<p>First we need to include the <a href="https://code.google.com/p/recaptcha/downloads/detail?name=recaptcha-php-1.11.zip">reCAPTCHA sdk library</a> that we previously downloaded.</p>

<p>Mine is unzipped into a folder named <code>recaptcha-php-1.11</code> in the project folder.  That folder should have a <code>recaptchalib.php</code> file in it.</p>

<p>Add the following to the top of the <code>contact.php</code> page to include the library.</p>

<pre><code class="php">require_once(__DIR__ . '/recaptcha-php-1.11/recaptchalib.php');
</code></pre>

<p>Load up the page to make sure there are no errors.  If there are the path to the library file is incorrect.</p>

<p>The reCAPTCHA library needs a variable to store its errors in.
Add the following where we initialize our <code>$errors</code> and <code>$valid</code> variable.</p>

<pre><code class="php">$captchaerror = null;
</code></pre>

<p>Now we add the form field for the reCAPTCHA field.</p>

<pre><code class="php">&lt;div class="row"&gt;
    &lt;?php echo recaptcha_get_html($config['recaptcha']['publickey'], $captchaerror); ?&gt;
&lt;/div&gt;
</code></pre>

<p>The reCAPTCHA field should show up on the form but wont do anything until we add code to check the posted value.</p>

<p><img src="/assets/images/contact-form/part-4/reCAPTCHA.png" alt="reCAPTCHA" /></p>

<p>Add another check to make sure a value was posted by changing the line that checks the other posted variables to the following.</p>

<pre><code class="php">if (isset($_POST['name'], $_POST['email'], $_POST['message'], $_POST['recaptcha_challenge_field'], $_POST['recaptcha_response_field'])) {
</code></pre>

<p>Actually with the validation code we have we don't need to check the other form fields anymore so it can be changed to the following.</p>

<pre><code class="php">if (isset($_POST['recaptcha_challenge_field'], $_POST['recaptcha_response_field'])) {
</code></pre>

<p>Now add the following just after that line and before the form validation code.</p>

<pre><code class="php">$resp = recaptcha_check_answer(
    $config['recaptcha']['privatekey'],
    $_SERVER["REMOTE_ADDR"],
    $_POST["recaptcha_challenge_field"],
    $_POST["recaptcha_response_field"]
);

if (!$resp-&gt;is_valid) {
    $captchaerror = $resp-&gt;error;
    $valid = false;
    $errors['captcha'] = "Entered text did not match.";
}
</code></pre>

<p>This code checks the value the user submitted for the reCAPTCHA field to make sure it matches the image that was displayed to them.
If it doesn't it marks the form for failed validation.</p>

<p>Our full <code>contact.php</code> script should now look like the following.</p>

<pre><code class="php">&lt;?php

require_once(__DIR__ . '/recaptcha-php-1.11/recaptchalib.php');

$valid = true;
$errors = array();
$captchaerror = null;

// Load config file
$config = include(__DIR__ . '/config.php');

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['recaptcha_challenge_field'],$_POST['recaptcha_response_field'])) {
    $resp = recaptcha_check_answer(
        $config['recaptcha']['privatekey'],
        $_SERVER["REMOTE_ADDR"],
        $_POST["recaptcha_challenge_field"],
        $_POST["recaptcha_response_field"]
    );

    if (!$resp-&gt;is_valid) {
        $captchaerror = $resp-&gt;error;
        $valid = false;
        $errors['captcha'] = "Entered text did not match.";
    }

    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }

    if ($valid) {
        // The email address the email will be sent to
        $to = $config['contact']['to'];
        // Set the from address for the email
        $from = $config['contact']['from'];
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: " . $from . "\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required data-parsley-required-message="You must enter your name."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required data-parsley-required-message="You must enter your email address." parsley-type-email-message="You must enter a valid email address."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message" required data-parsley-required-message="You must enter a message."&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;?php echo recaptcha_get_html($config['recaptcha']['publickey'], $captchaerror); ?&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;

        &lt;/fieldset&gt;
    &lt;/form&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Building a simple contact form in PHP - Part 3]]></title>
            <link href="https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-3/"/>
            <updated>2014-09-03T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-3/</id>
            <summary><![CDATA[Adding client-side form validation to a php contact form.]]></summary>            <content type="html"><![CDATA[<p>As we last left it in <a href="/2014/09/building-a-simple-contact-form-in-php-part-2/">part 2</a> of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1/">Building a simple contact form in PHP</a> we added server-side form validation to our contact form and input filtering to the submitted data before sending out the email.</p>

<p>In this part we are going to add some client-side validation to our contact form.</p>

<!--more-->

<p>This is the contact form as we left it.</p>

<pre><code class="php"> &lt;?php

$valid = true;
$errors = array();

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="text" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message"&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2 id="why-add-client-side-validation%3F">Why Add Client-Side Validation?</h2>

<p>It is important to keep in mind that client-side validation doesn't not provide any extra security for your application.  Circumventing it is as easy as turning off javascript in your browser.
Implementing client-side validation without server-side validation is like not having any validation at all.
So why even have client-side validation?  Server-Side validation will catch all of the same problems so what is the benefit?</p>

<p>The reason to use client-side validation is simply to make things a bit easier on the user.
To validate something om the server the form must be submitted and a new request is created.
If the validation fails the browser must download and render the page again including all assets like css, and images.  Any javascript files will be run again.
If a required form field is blank why even bother to send the request to the server in the first place just to tell you what you already know?</p>

<p>For a form as small as this contact form this isn't really a big deal but the more fields there are and the more complicated the form is the more valuable client-side form validation becomes.</p>

<h2 id="adding-html5-client-side-validation">Adding HTML5 Client-Side Validation</h2>

<p>Most browsers actually have built in client-side validation just by adding attributes to your form elements.</p>

<p>Add a <code>required</code> attribute to each of the form elements.</p>

<pre><code class="php">// name
&lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required&gt;
// email
&lt;input id="email" type="text" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required&gt;
// message
&lt;textarea id="message" name="message"&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
</code></pre>

<p>Now load up the form any try submitting a blank form.
Depending on your browser you should see a message telling you to fill out a required field and the form isn't submitted.</p>

<p>Here is what it looks like in Google Chrome.</p>

<p><img src="/assets/images/contact-form/part-3/html5-validation.png" alt="HTML5 Validation" /></p>

<p>Now change the email input type from <code>text</code> to <code>email</code> so it looks like the following.</p>

<pre><code class="php">&lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required&gt;
</code></pre>

<p>Now fill out the other two fields en enter something that isn't an email address in the email field.</p>

<p>Here is what I see in Google Chrome.</p>

<p><img src="/assets/images/contact-form/part-3/html5-email-validation.png" alt="HTML5 Validation" /></p>

<p>This also has the benefit of showing an email-specific keyboard on many mobile devices when the email field is filled out.</p>

<h2 id="javascript-form-validation-using-parsley">Javascript Form Validation using Parsley</h2>

<p>While the built-in html5 validation does get the job done it tends to be ugly and you don't have much control over it.</p>

<p>We are going to use a form validation library called <a href="http://parsleyjs.org">Parsley</a> to help us add form validation that will use the same attributes as the html5 form validation we already added.</p>

<p>Add the following to the html below the form but before the closing <code>&lt;/body&gt;</code> tag.</p>

<pre><code class="html">&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>Parsley depends on <a href="http://jquery.com">jQuery</a> so I am loading that as well as the Parsley library itself.
I am loading both using a <a href="http://en.wikipedia.org/wiki/Content_delivery_network">CDN</a> but you could just as easily download both libraries from their websites and include them locally.</p>

<p>Now that the library is included the first thing we need to do is disable the html5 form validation.
Add a <code>novalidate</code> attribute to the <code>form</code> tag.  This will disable the built-in html5 form validation so we can have Parsley do the work.</p>

<p>Next we need to tell Parsley that we want it to validate our form.
Add a <code>data-parsley-validate</code> attribute to the <code>form</code> tag.</p>

<p>The form tag should now look like the following.</p>

<pre><code class="php">&lt;form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate&gt;
</code></pre>

<p>Now load up the page and try submitting a blank form.</p>

<p>You should see <code>This value is required.</code> under each of the form fields.</p>

<p>Lets make it look a bit better.  Add the following to your <code>styles.css</code> file.</p>

<pre><code class="css">ul.parsley-errors-list{
    margin:0;
    padding:0;
}
ul.parsley-errors-list li{
    margin:0 0 0 5px;
    padding:0;
    list-style-type: none;
    color: #CC0000;
    font-weight:bold;
}
</code></pre>

<p><img src="/assets/images/contact-form/part-3/parsely-validation.png" alt="HTML5 Validation" /></p>

<h3 id="customizing-error-messages">Customizing error messages</h3>

<p>Now we are going to customize the error messages displayed for failed form validation.</p>

<p>Add a <code>data-parsley-required-message</code> attribute to each of the form fields equal to the message you want displayed when that validation fails.
It should look like the following.</p>

<pre><code class="php">&lt;div class="row"&gt;
    &lt;label for="name"&gt;Name: &lt;/label&gt;
    &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required data-parsley-required-message="You must enter your name."&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;label for="email"&gt;Email Address: &lt;/label&gt;
    &lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required data-parsley-required-message="You must enter your email address." parsley-type-email-message="You must enter a valid email address."&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;label for="message"&gt;Message:&lt;/label&gt;
    &lt;textarea id="message" name="message" required data-parsley-required-message="You must enter a message."&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
&lt;/div&gt;
</code></pre>

<p>Now the custom messages you provided will be displayed instead of the default <code>This value is required.</code> message.</p>

<p><img src="/assets/images/contact-form/part-3/parsely-messages.png" alt="HTML5 Validation" /></p>

<p>The full <code>contact.php</code> should now look like the following.</p>

<pre><code class="php">&lt;?php

$valid = true;
$errors = array();

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8" data-parsley-validate novalidate&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;" required data-parsley-required-message="You must enter your name."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="email" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;" required data-parsley-required-message="You must enter your email address." parsley-type-email-message="You must enter a valid email address."&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message" required data-parsley-required-message="You must enter a message."&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;

    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.0.2/parsley.min.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Building a simple contact form in PHP - Part 2]]></title>
            <link href="https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-2/"/>
            <updated>2014-09-02T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-2/</id>
            <summary><![CDATA[Adding server-side form validation to a php contact form.]]></summary>            <content type="html"><![CDATA[<p>In <a href="/2014/09/building-a-simple-contact-form-in-php-part-1/">part 1</a> of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1/">Building a simple contact form in PHP</a> we built a simple contact form that sends a notification when the form is posted with the values the user posted.</p>

<p>As we discussed at the end of <a href="/2014/09/building-a-simple-contact-form-in-php-part-1/">part 1</a> there are a few problems with our contact form.</p>

<p>We are going to work on solving some of those problems.</p>

<!--more-->

<p>The is what the contact form looked like as we last left it.</p>

<pre><code class="php">&lt;?php

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    // The email address the email will be sent to
    $to = "business@example.com";
    // The email subject
    $subject = "Contact Form Submission";
    // Set the from and reply-to address for the email
    $headers = "From: website@example.com\r\n"
             . "X-Mailer: PHP/" . phpversion();
    // Build the body of the email
    $mailbody = "The contact form has been filled out.\n\n"
              . "Name: " . $_POST['name'] . "\n"
              . "Email: " . $_POST['email'] . "\n"
              . "Message:\n" . $_POST['message'];
    // Send the email
    mail($to, $subject, $mailbody, $headers);
    // Go to the thank you page
    header("location: thankyou.html");
    exit;

}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
     &lt;fieldset&gt;
         &lt;legend&gt;Contact Us&lt;/legend&gt;
         &lt;div class="row"&gt;
             &lt;label for="name"&gt;Name: &lt;/label&gt;
             &lt;input id="name" type="text" name="name" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="email"&gt;Email Address: &lt;/label&gt;
             &lt;input id="email" type="text" name="email" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="message"&gt;Message:&lt;/label&gt;
             &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;input type="submit" value="Submit"&gt;
         &lt;/div&gt;
     &lt;/fieldset&gt;
 &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2 id="adding-form-validation">Adding Form Validation</h2>

<p>Right now a user is able to submit a blank form and an email will still be sent.</p>

<p>We are going to add some server side validation so the form submission will only be accepted if the form is fully filled out.</p>

<p>We will also require the data entered in the email field to be a valid email address.</p>

<p>We will start by added a variable that we will use to store any validation error messages that we need to show to the user as well as a flag used to mark the form as failed validation.</p>

<p>Add the following to the top of the php code.</p>

<pre><code class="php">$valid = true;
$errors = array();
</code></pre>

<p>Next after the form is posted we will check that each field not empty.</p>

<p>Add the following code directly after the <code>if</code> and before email body is built.</p>

<pre><code class="php">if (empty($_POST['name'])) {
    $valid = false;
    $errors['name'] = "You must enter your name.";
}
if (empty($_POST['email'])) {
    $valid = false;
    $errors['email'] = "You must enter your email address.";
}
if (empty($_POST['message'])) {
    $valid = false;
    $errors['message'] = "You must enter a message.";
}
</code></pre>

<p>Now we need to only send the email if <code>$valid</code> is still true.  Wrap the email sending with a check to see if <code>$valid</code> is truthy.</p>

<p>The php code should now look like the following.</p>

<pre><code class="php">&lt;?php

$valid = true;
$errors = array();

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    if (empty($_POST['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($_POST['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    }
    if (empty($_POST['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $_POST['name'] . "\n"
                  . "Email: " . $_POST['email'] . "\n"
                  . "Message:\n" . $_POST['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
</code></pre>

<p>Note that I am using the <a href="http://us2.php.net/manual/en/function.empty.php">empty</a> function to check if the form field is not empty.
The empty function only checks if a value is falsey.  Since php is a loosely-typed language an empty string or even the string "0" will evaluate to false.
This means if the user enters the number <code>0</code> in a field the form validation will determine that the field is empty.
For this form that is fine as <code>0</code> is not valid entry for any of the fields we have but if we have a form field where 0 is a valid answer we could not use the <code>empty</code> function to validate that field.</p>

<p>Now we need to show these validation error messages to the user when they submit the form.</p>

<p>Add the following to the form right after the <code>&lt;legend&gt;</code> field.</p>

<pre><code class="php">&lt;?php if (!$valid): ?&gt;
    &lt;div class="error"&gt;
        &lt;?php foreach($errors as $message):?&gt;
            &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
        &lt;?php endforeach; ?&gt;
    &lt;/div&gt;
&lt;?php endif; ?&gt;
</code></pre>

<p>Now, when the user submits the form without filling out one or more of the fields no email will be sent and the messages will be shown to the user.</p>

<h3 id="email-address-validation">Email Address Validation</h3>

<p>Since the main purpose of a contact form is to allow communication with users we need to make sure that the value entered in the email field is an email address rather then just checking if the field is not empty.</p>

<p>We will use the <a href="http://us2.php.net/manual/en/function.filter-input.php">filter_input</a> to validate the email address.</p>

<p>Change the validation for the email field to the following</p>

<pre><code class="php">if (empty($_POST['email'])) {
    $valid = false;
    $errors['email'] = "You must enter your email address.";
} elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
    $valid = false;
    $errors['email'] = "You must enter a valid email address.";
}
</code></pre>

<p>Our full contact.php page should now look like this.</p>

<pre><code class="php">&lt;?php

$valid = true;
$errors = array();

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    if (empty($_POST['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($_POST['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($_POST['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $_POST['name'] . "\n"
                  . "Email: " . $_POST['email'] . "\n"
                  . "Message:\n" . $_POST['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value=""&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="text" name="email" value=""&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3 id="repopulating-the-form">Repopulating the Form</h3>

<p>We are giving users messages telling them they need to fill out all of the fields but we still need to repopulate the form with the values they submitted.</p>

<p>There is little more annoying to users than filling out a form only to be told they did it wrong and being forced to do it all over again.</p>

<p>What if they spent time typing out a long message but forgot to fill out the name field?
They will once again be staring at a blank form.
They will more likely just leave rather than retype their message.</p>

<p>To repopulate the form we will need some variables to store the posted data in.</p>

<p>Add the following above the mail sending code.</p>

<pre><code class="php">$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);
</code></pre>

<p>This will initialize the variable so we don't have to check if the form was posted in the middle of our html.</p>

<p>Change the form fields to the following.</p>

<pre><code class="php">&lt;div class="row"&gt;
    &lt;label for="name"&gt;Name: &lt;/label&gt;
    &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;"&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;label for="email"&gt;Email Address: &lt;/label&gt;
    &lt;input id="email" type="text" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;"&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;label for="message"&gt;Message:&lt;/label&gt;
    &lt;textarea id="message" name="message"&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
&lt;/div&gt;
</code></pre>

<p>We are using <a href="http://us2.php.net/manual/en/function.htmlspecialchars.php">htmlspecialchars</a> to escape the data to prevent <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting</a> attacks.</p>

<p>While we are on the subject of security we are also going to add some filtering to the input before sending the emails.
While we are sending plain text emails we don't want to trust that whatever email client is used to read the email wont try to do something like try to run something posted to the form.</p>

<p>Add the following code right before the form validation.</p>

<pre><code class="php">$contact = filter_input_array(INPUT_POST, array(
    'name'   =&gt; FILTER_SANITIZE_STRING,
    'email'   =&gt; FILTER_SANITIZE_STRING,
    'message'   =&gt; FILTER_SANITIZE_STRING,
), true);
</code></pre>

<p>Now anywhere in the validation or email sending code that references <code>$_POST</code> should be changed to <code>$contact</code></p>

<p><img src="/assets/images/contact-form/part-2/validation.png" alt="Form Validation" /></p>

<h3 id="using-the-posted-email-address-as-the-reply-to-address">Using the posted email address as the Reply-To address</h3>

<p>Now that we have validated that the email address field contains an email address we can use the email address the user submitted as the Reply-To address for the email.
This will allow you to hit reply in your email client to send a reply directly to the user.</p>

<p>Change the <code>$headers</code> line to the following.</p>

<pre><code class="php">$headers = "From: website@example.com\r\n"
 . "Reply-To: " . $contact['email'] . "\r\n"
 . "X-Mailer: PHP/" . phpversion();
</code></pre>

<p>The full <code>contact.php</code> should now look like the following.</p>

<pre><code class="php">&lt;?php

$valid = true;
$errors = array();

$contact = array(
    'name' =&gt; null,
    'email' =&gt; null,
    'message' =&gt; null
);

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    $contact = filter_input_array(INPUT_POST, array(
        'name'   =&gt; FILTER_SANITIZE_STRING,
        'email'   =&gt; FILTER_SANITIZE_STRING,
        'message'   =&gt; FILTER_SANITIZE_STRING,
    ), true);
    if (empty($contact['name'])) {
        $valid = false;
        $errors['name'] = "You must enter your name.";
    }
    if (empty($contact['email'])) {
        $valid = false;
        $errors['email'] = "You must enter your email address.";
    } elseif (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {
        $valid = false;
        $errors['email'] = "You must enter a valid email address.";
    }
    if (empty($contact['message'])) {
        $valid = false;
        $errors['message'] = "You must enter a message.";
    }
    if ($valid) {
        // The email address the email will be sent to
        $to = "business@example.com";
        // The email subject
        $subject = "Contact Form Submission";
        // Set the from and reply-to address for the email
        $headers = "From: website@example.com\r\n"
                 . "Reply-To: " . $contact['email'] . "\r\n"
                 . "X-Mailer: PHP/" . phpversion();
        // Build the body of the email
        $mailbody = "The contact form has been filled out.\n\n"
                  . "Name: " . $contact['name'] . "\n"
                  . "Email: " . $contact['email'] . "\n"
                  . "Message:\n" . $contact['message'];
        // Send the email
        mail($to, $subject, $mailbody, $headers);
        // Go to the thank you page
        header("location: thankyou.html");
        exit;
    }
}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
        &lt;fieldset&gt;
            &lt;legend&gt;Contact Us&lt;/legend&gt;
            &lt;?php if (!$valid): ?&gt;
                &lt;div class="error"&gt;
                    &lt;?php foreach($errors as $message):?&gt;
                        &lt;div&gt;&lt;?php echo htmlspecialchars($message); ?&gt;&lt;/div&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
            &lt;div class="row"&gt;
                &lt;label for="name"&gt;Name: &lt;/label&gt;
                &lt;input id="name" type="text" name="name" value="&lt;?php echo htmlspecialchars($contact['name']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="email"&gt;Email Address: &lt;/label&gt;
                &lt;input id="email" type="text" name="email" value="&lt;?php echo htmlspecialchars($contact['email']);?&gt;"&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;label for="message"&gt;Message:&lt;/label&gt;
                &lt;textarea id="message" name="message"&gt;&lt;?php echo htmlspecialchars($contact['message']);?&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="row"&gt;
                &lt;input type="submit" value="Submit"&gt;
            &lt;/div&gt;
        &lt;/fieldset&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2 id="summary">Summary</h2>

<p>We have added server-side form validation, input sanitation, repopulated the form on failed validation, and set the Reply-To header.</p>

<p>Next time we are going to add some client-side form validation to make the user experience a bit more pleasant.</p>

<p>We will also going to add some anti-spam protection to the form.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Building a simple contact form in PHP - Part 1]]></title>
            <link href="https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-1/"/>
            <updated>2014-09-01T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/09/building-a-simple-contact-form-in-php-part-1/</id>
            <summary><![CDATA[Building a simple contact form in PHP]]></summary>            <content type="html"><![CDATA[<p>In this series we will be building a simple contact form in php.</p>

<p>It will cover sending emails and form validation.</p>

<!--more-->

<h2 id="creating-the-contact-form">Creating the Contact Form</h2>

<p>We will start with the form itself.</p>

<p>Save the following as contact.php</p>

<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
     &lt;fieldset&gt;
         &lt;legend&gt;Contact Us&lt;/legend&gt;
         &lt;div class="row"&gt;
             &lt;label for="name"&gt;Name: &lt;/label&gt;
             &lt;input id="name" type="text" name="name" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="email"&gt;Email Address: &lt;/label&gt;
             &lt;input id="email" type="text" name="email" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="message"&gt;Message:&lt;/label&gt;
             &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;input type="submit" value="Submit"&gt;
         &lt;/div&gt;
     &lt;/fieldset&gt;
 &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>We will also add a stylesheet with some basic styles for the form.</p>

<p>Save the following as styles.css</p>

<pre><code class="css">fieldset {
    margin:0 auto;
    width: 235px;
}
legend {
    font-weight:bold;
    font-size:125%;
}
form div.row {
    margin-bottom: 8px;
}
label {
    display: block;
    font-weight:bold;
}
input[type=text],input[type=email] {
    display:block;
    width: 400px;
}

textarea {
    width: 400px;
    height:200px;
}
</code></pre>

<p>If you view the page in a browser it should look something like this.</p>

<p><img src="/assets/images/contact-form/part-1/contact-form.png" alt="Contact Form" /></p>

<p>Not the prettiest form but this isn't a design tutorial.
Feel free to add your own styles.</p>

<p>We also will need a page to send the user to after they submit the form.
This should have some sort of "Thank you for submitting" message on it.</p>

<p>Save the following as thankyou.html</p>

<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;Thank you for your message.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2 id="sending-an-email-on-form-post.">Sending an email on form post.</h2>

<p>We have a form but it doesn't do anything when the user submits it.</p>

<p>Add the following to the top of the contact.php page above the <code>&lt;!DOCTYPE html&gt;</code> line.</p>

<pre><code class="php">&lt;?php

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    // The email address the email will be sent to
    $to = "business@example.com";
    // The email subject
    $subject = "Contact Form Submission";
    // Set the from and reply-to address for the email
    $headers = "From: website@example.com\r\n"
             . "X-Mailer: PHP/" . phpversion();
    // Build the body of the email
    $mailbody = "The contact form has been filled out.\n\n"
              . "Name: " . $_POST['name'] . "\n"
              . "Email: " . $_POST['email'] . "\n"
              . "Message:\n" . $_POST['message'];
    // Send the email
    mail($to, $subject, $mailbody, $headers);
    // Go to the thank you page
    header("location: thankyou.html");
    exit;

}

?&gt;
</code></pre>

<p>The entire page should not look like this.</p>

<pre><code class="php">&lt;?php

// Check if the form has been posted
if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
    // The email address the email will be sent to
    $to = "business@example.com";
    // The email subject
    $subject = "Contact Form Submission";
    // Set the from and reply-to address for the email
    $headers = "From: website@example.com\r\n"
             . "X-Mailer: PHP/" . phpversion();
    // Build the body of the email
    $mailbody = "The contact form has been filled out.\n\n"
              . "Name: " . $_POST['name'] . "\n"
              . "Email: " . $_POST['email'] . "\n"
              . "Message:\n" . $_POST['message'];
    // Send the email
    mail($to, $subject, $mailbody, $headers);
    // Go to the thank you page
    header("location: thankyou.html");
    exit;

}

?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;title&gt;Contact Us&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="contact.php" method="post" accept-charset="utf-8"&gt;
     &lt;fieldset&gt;
         &lt;legend&gt;Contact Us&lt;/legend&gt;
         &lt;div class="row"&gt;
             &lt;label for="name"&gt;Name: &lt;/label&gt;
             &lt;input id="name" type="text" name="name" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="email"&gt;Email Address: &lt;/label&gt;
             &lt;input id="email" type="text" name="email" value=""&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;label for="message"&gt;Message:&lt;/label&gt;
             &lt;textarea id="message" name="message"&gt;&lt;/textarea&gt;
         &lt;/div&gt;
         &lt;div class="row"&gt;
             &lt;input type="submit" value="Submit"&gt;
         &lt;/div&gt;
     &lt;/fieldset&gt;
 &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3 id="how-does-it-work%3F">How does it work?</h3>

<p>First we are checking if each of the form fields have been posted.
If they exist the user has submitted the form.</p>

<pre><code class="php">if (isset($_POST['name'], $_POST['email'], $_POST['message'])) {
</code></pre>

<p>Next we define where we would like the email to be sent and what the subject of the email should be.
Change the <code>$to</code> variable to your own email address.</p>

<pre><code class="php">// The email address the email will be sent to
$to = "business@example.com";
// The email subject
$subject = "Contact Form Submission";
</code></pre>

<p>The headers set the email address used for the from in the email.
The other line indicates the application used to send the email.  In this case php.</p>

<pre><code class="php">// Set the from and reply-to address for the email
$headers = "From: website@example.com\r\n"
         . "X-Mailer: PHP/" . phpversion();
</code></pre>

<p>We now need to build the body of the email itself.
It should include each of the posted values.</p>

<pre><code class="php">// Build the body of the email
$mailbody = "The contact form has been filled out.\n\n"
          . "Name: " . $_POST['name'] . "\n"
          . "Email: " . $_POST['email'] . "\n"
          . "Message:\n" . $_POST['message'];
</code></pre>

<p>Next we use the <a href="http://us3.php.net/manual/en/book.mail.php">php mail</a> function to actually send the email.</p>

<pre><code class="php">// Send the email
mail($to, $subject, $mailbody, $headers);
</code></pre>

<p>Finally we send the user to the thankyou.html page that we created.</p>

<pre><code class="php">// Go to the thank you page
header("location: thankyou.html");
exit;
</code></pre>

<h2 id="improving-the-script">Improving the script</h2>

<p>While this script would work as is for your contact form it have a number of problems with it.</p>

<p>The biggest one is that there is no form validation.
A user can submit a blank form and it will send the email and redirect to the thankyou.html page anyway.</p>

<p>The data the user is submitting is not being escaped or filtered.
We only want plain text being submitted through the form but without any enforcement of that the user can submit anything including scripts that might cause security issues with certain email clients.</p>

<p>There is nothing to help prevent spam.
Once a spam-bot finds this script you could find your inbox full of worthless junk.</p>

<p>In the next part I will tackle some of these issues.</p>
]]></content>
        </entry>
    </feed>
