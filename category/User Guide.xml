<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[The Dev Files]]></title>
    <link href="https://www.thedevfiles.com/category/User Guide.xml" rel="self"/>
    <link href="https://www.thedevfiles.com/"/>
    <updated>2016-06-16T09:04:53-07:00</updated>
    <id>https://www.thedevfiles.com/</id>
            <author>
            <name><![CDATA[Jonathan Bernardi]]></name>            <email><![CDATA[jon@jonbernardi.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Managing Dependencies with Composer]]></title>
            <link href="https://www.thedevfiles.com/2014/09/managing-dependencies-with-composer/"/>
            <updated>2014-09-08T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/09/managing-dependencies-with-composer</id>
            <summary><![CDATA[Using composer to manage dependencies.]]></summary>            <content type="html"><![CDATA[<p><a href="http://getcomposer.org">Composer</a> is a package manager for PHP much like <a href="https://rubygems.org/">gem</a> is for ruby or <a href="https://www.npmjs.org/">npm</a> is for node.</p>

<p>It allows you to define libraries that your application depends on and will install them for you as well a their own dependencies.</p>

<p>It also includes an autoloader to load classes in both the installed packages as well as your own classes.</p>

<!--more-->

<h2 id="installation">Installation</h2>

<p>The easiest way to install composer on a Mac or Linux based OS is to run one of the following commands from a terminal.</p>

<pre><code class="bash">curl -sS https://getcomposer.org/installer | php
</code></pre>

<pre><code class="bash">php -r "readfile('https://getcomposer.org/installer');" | php
</code></pre>

<p>This will download a <code>composer.phar</code> file into the current directory.</p>

<p>If you want to be able to run composer from any directory you need to move the <code>composer.phar</code> file into a directory on your path.</p>

<pre><code class="bash">sudo mv composer.phar /usr/bin/composer
</code></pre>

<p>To install on windows just download the <a href="https://getcomposer.org/Composer-Setup.exe">Composer-Setup.exe</a> installer.
This will install composer as well as add it to your path and optionally add a shell extension that will let you run composer commands from Windows Explorer.</p>

<p>You can find further options for downloading and installing on <a href="https://getcomposer.org/download/">the official download page</a>.</p>

<p>For the rest of this article I will assume composer is installed in the local directory as <code>composer.phar</code>.</p>

<h2 id="adding-packages">Adding packages</h2>

<p>Now that we have a package manager we need to install some packages.</p>

<p>Composer can install packages from any git, mercurial, or subversion repository as well as <a href="http://pear.php.net/">PEAR</a> packages but the main source for composer packages is <a href="https://packagist.org/">Packagist</a>.</p>

<p>To install a package we need to start by creating a <code>composer.json</code> file at the root of our project.</p>

<p>To have composer create this file for you run the following command.</p>

<pre><code class="bash">php composer.phar init
</code></pre>

<p>You will be asked questions about your application such as the package name, description, and authors.</p>

<p>You will then be asked if you would like to define dependencies.
You can then add dependencies and their versions.
Composer will then create a <code>composer.json</code> file with the dependencies you defined.</p>

<p>To then install the added packages run the following command.</p>

<pre><code class="bash">php composer.phar install
</code></pre>

<p>This will download all of your requested packages and their dependencies and add then to the autoloader.</p>

<p>To add more packages to your application open the <code>composer.json</code> file.
There should be a <code>require</code> property with a list of your current packages.</p>

<p>You can add any new packages by adding them to this list.</p>

<pre><code class="json">{
    "require": {
        "monolog/monolog": "~1.10.0",
        "swiftmailer/swiftmailer": "~5.2.1"
    }
}
</code></pre>

<p>To install the newly added packages or remove the deleted ones run the following command.</p>

<pre><code class="bash">php composer.phar update
</code></pre>

<p>To add and install a new package in one step you can use the <code>require</code> command passing the name of the package and the version separated by a colon.</p>

<pre><code class="bash">php composer.phar require symfony/filesystem:2.5.3
</code></pre>

<p>This will add the package to the <code>composer.json</code> file and install the package.</p>

<h2 id="updating-packages">Updating packages</h2>

<p>To update packages just change the version numbers and run the update command again.</p>

<pre><code class="bash">php composer.phar update
</code></pre>

<h2 id="the-autoloader">The Autoloader</h2>

<p>The autoloader included in composer is very flexible and can be used to load most anything.</p>

<p>To include the autoloader in your project require the <code>autoload.php</code> file located in the vendor directory.</p>

<pre><code class="php">require('path/to/vendor/autoload.php');
</code></pre>

<h3 id="adding-your-own-classes-to-the-autoloader.">Adding your own classes to the autoloader.</h3>

<p>Composer includes install packages in the autoloader automatically but you can add your own classes to the autoloader as well.</p>

<p>The autoloader can be configured using the <code>autoload</code> property in the <code>composer.json</code> file.</p>

<p>The autoloader supports 4 different methods for autoloading classes, psr-0, psr-4, classmap, and files.</p>

<h4 id="psr-0-%2F-psr-4">PSR-0 / PSR-4</h4>

<p>Composer can autoload any classes following either the <a href="http://www.php-fig.org/psr/psr-0/">PSR-0</a> or the <a href="http://www.php-fig.org/psr/psr-4/">PSR-4</a> naming standards.</p>

<p>The main differences between the two is that PSR-4 can define a namespace to start at any given directory without including all namespaces in the directory tree but PSR-4 can only load classes that are namespaced.</p>

<p>PSR-0 can load classes in the root namespace and can load classes using the PEAR style underscore separated classes such as the class <code>Net_URL_Mapper</code> would be located in the file <code>Net/URL/Mapper.php</code>.</p>

<pre><code class="json">{
    "autoload": {
        "psr-0": {
            "Zend_": "zendframework/library/"
        },
        "psr-4": {
            "Bob\\Model": "app/models/"
        }
    }
}
</code></pre>

<h4 id="classmap-and-files">Classmap and Files</h4>

<p>By adding a directory to a <code>classmap</code> array composer will scan the directory and create a classmap for all classes in the directory.</p>

<p>You can also add a file directly and all classes in that file will be added to the classmap.</p>

<p>This can be used to load classes that do not follow the PSR-0 or PSR-4 naming standard.</p>

<pre><code class="json">{
    "autoload": {
        "classmap": [
            "src/library/",
            "src/app/models/",
            "classes/MyClass.php"
        ]
    }
}
</code></pre>

<p>Files added to the <code>files</code> array will be loaded on every request.</p>

<p>This can be helpful for things like functions that cannot be autoloaded.</p>

<pre><code class="json">{
    "autoload": {
        "files": [
            "src/library/functions.php"
        ]
    }
}
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Secure Password Hashing with PHP]]></title>
            <link href="https://www.thedevfiles.com/2014/08/secure-password-hashing/"/>
            <updated>2014-08-22T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/08/secure-password-hashing</id>
            <summary><![CDATA[The password_hash function added in PHP 5.5 makes secure password hashing easy.]]></summary>            <content type="html"><![CDATA[<p>There is a lot of misinformation and uncertainty on the topic of password storage.</p>

<p>There are massive amounts of tutorials and articles recommending all manor of methods of storing passwords.
A large number of these are old and using methods that just are up to snuff for todays security standards.</p>

<!--more-->

<h2 id="common-password-storing-mistakes">Common password storing mistakes</h2>

<p>Here are some of the most common mistakes make with regards to password hashing.</p>

<p>I've been guilty of all of these in the past.</p>

<h3 id="md5-and-sha1-hashing">MD5 and SHA1 hashing</h3>

<p>The <a href="http://us1.php.net/manual/en/function.md5.php">md5</a> and <a href="http://us1.php.net/manual/en/function.sha1.php">sha1</a> are not suitable for password hashing.</p>

<p>This is true for any of the related hashing algorithms from the <a href="http://us1.php.net/manual/en/function.hash.php">hash</a> function like sha256, sha512, and so on.
While the larger hashes are slightly better than the shorter ones they all suffer from the same problem.</p>

<p>Over time computers are getting faster and faster and can calculate a hash in a shorter amount of time.
A high end machine with a cluster of GPUs can calculate billions of md5 hashes a second.
You can rent such a machine from <a href="http://aws.amazon.com/ec2/pricing/">Amazon</a> for less than $1 an hour.</p>

<p>Over time each of these hashing functions will become faster and faster to break.</p>

<p>The other weakness of these algorithms is that unless the passwords are also salted they are susceptible to rainbow table attacks.</p>

<p>Every time a password is hashed it will result in the same hash.
This means if you have a list of hashes and their corresponding passwords you can just find the hash in the list to break the password.</p>

<h3 id="trying-to-create-your-own-hashing-algorithm">Trying to create your own hashing algorithm</h3>

<p>People have tried to get around the fast hashing algorithms by running them multiple times or trying to mix and match them to create their own hashing algorithm.</p>

<p>The problem is that the hashes can be calculated so fast that it would take thousands of hashes to make a difference.
Even then at time moves on computers will get even faster and the number of necessary hashes will just keep increasing.</p>

<h3 id="using-the-same-salt-for-all-passwords">Using the same salt for all passwords</h3>

<p>Using the same salt for all passwords is much better then not using a salt at all.</p>

<p>Every password should have its own salt.</p>

<h2 id="the-solution">The Solution</h2>

<p>So how should passwords be hashed?</p>

<ol>
<li>Each password needs to be salted with a different cryptographic salt.</li>
<li>The hashing algorithm must not be fast regardless of the power of the machine used to generate them.</li>
</ol>

<p>The current recommended methods for securely hashing passwords are <a href="http://en.wikipedia.org/wiki/Bcrypt">Bcrypt</a> or <a href="http://en.wikipedia.org/wiki/PBKDF2">PBKDF2</a>.</p>

<p>The Bcrypt algorithm can be used with the <a href="http://us1.php.net/manual/en/function.crypt.php">crypt</a> function but this isn't very easy to use.
You still need to generate a cryptographic salt and that isn't very easy either.</p>

<p>Thankfully there is now a better way.</p>

<p>PHP 5.5 added the <a href="http://php.net/manual/en/function.password-hash.php">password_hash</a> function which hides the ugliness of using the crypt function and makes secure password hashing truly easy.</p>

<p>Not using PHP 5.5+?  The <a href="https://github.com/ircmaxell/password_compat">ircmaxell/password_compat</a> library will add the same functionality to PHP 5.3.7+.</p>

<p>Even better? The password_hash function is future proof.  While Bcrypt is the best algorithm available to PHP for hashing passwords this may not always be the case.
As better algorithms are released the password_hash function will automatically use the best algorithm available.</p>

<p>Your application will begin to use the newer more secure algorithm without you even touching the code.</p>

<h2 id="using-password_hash-for-password-hashing">Using password_hash for password hashing</h2>

<p>For this example I'm assuming you have a database table called users with a username and a password column.</p>

<p>I'm also using PDO for the database interactions.
If you need help using PDO take a look at the article I wrote about <a href="/2014/08/moving-from-mysql-query-to-pdo/">Migrating from mysql_query to PDO</a>.
Make sure to use prepared statements to prevent SQL injection.</p>

<pre><code class="php">&lt;?php

class UserModel
{

    /**
     * @var PDO
     */
    protected $dbh;

    /**
     * @param PDO $dbh
     */
    public function __construct(PDO $dbh)
    {
        $this-&gt;dbh = $dbh;
    }

    /**
     * Checks account credentials
     *
     * @param string $username
     * @param string $password
     *
     * @return array|false Array of user data if credentials are correct or boolean false if credentials are not correct
     */
    public function checkCredentials($username, $password)
    {
        $user = $this-&gt;getUserByUsername($username);
        if (!$user) {
            // No user found with provided username
            return false;
        }
        if (!password_verify($password, $user['password'])) {
            // Password does not match
            return false;
        }
        if (password_needs_rehash($user['password'], PASSWORD_DEFAULT)) {
            // This password was hashed using an older algorithm, update with new hash.
            $this-&gt;updatePassword($user['id'], $password);
        }
        // The password is no longer needed from the user data
        unset($user['password']);
        return $user;
    }

    /**
     * Returns a user by username
     *
     * @param string $username
     *
     * @return array|false Array of user data if found or boolean false if not found
     */
    public function getUserByUsername($username)
    {
        $sth = $this-&gt;dbh-&gt;prepare("SELECT * FROM users WHERE username LIKE :username");
        $sth-&gt;bindValue(":username", $username);
        $sth-&gt;execute();
        return $sth-&gt;fetch(PDO::FETCH_ASSOC);
    }

    /**
     * Updates a user's password
     *
     * @param int $id
     * @param string $password
     *
     * @return int Number of affected rows
     */
    public function updatePassword($id, $password)
    {
        $hash = password_hash($password, PASSWORD_DEFAULT);
        $sth = $this-&gt;dbh-&gt;prepare("UPDATE users SET password = :password WHERE id = :id");
        $sth-&gt;bindValue(":password", $hash);
        $sth-&gt;bindValue(":id", $id, PDO::PARAM_INT);
        return $sth-&gt;execute();
    }
}

</code></pre>

<h3 id="how-it-works">How it works</h3>

<ol>
<li>You pass the username and password the user provided in the login form to the checkCredentials method.</li>
<li>This method searches the database for a user with a matching username.</li>
<li>If no user is found the provided username was incorrect.</li>
<li>Next the <a href="http://php.net/manual/en/function.password-verify.php">password_verify</a> is called to check if the password was used to generate the hash that was stored in the database for the user with the matching username.</li>
<li>If it returns false then the provided password was incorrect.</li>
<li>Now that we have confirmed the provided login credentials are correct we pass the hashed password from the database to <a href="http://php.net/manual/en/function.password-needs-rehash.php">password_needs_rehash</a>.  This checks if the password needs to be upgraded to a newer, stronger algorithm.</li>
<li>If it returns true update the user's password by passing the provided password to the <a href="http://php.net/manual/en/function.password-hash.php">password_hash</a> function.</li>
<li>Return the user account so you can log the user in.</li>
</ol>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Simplifying database interactions with Doctrine DBAL]]></title>
            <link href="https://www.thedevfiles.com/2014/08/simplifying-database-interactions-with-doctrine-dbal/"/>
            <updated>2014-08-15T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/08/simplifying-database-interactions-with-doctrine-dbal</id>
            <summary><![CDATA[This article will introduce Doctrine DBAL for a more user friendly developer experience than straight PDO.]]></summary>            <content type="html"><![CDATA[<p>I previously wrote about <a href="/2014/08/moving-from-mysql-query-to-pdo/">switching from the mysql extension to PDO</a>.
PDO introduces a number of convenient features beyond the mysql extension such as transactions, prepared statements, and more fetching options.
However there are still a few things that are a bit painful.</p>

<p>This article will introduce <a href="http://www.doctrine-project.org/projects/dbal.html">Doctrine DBAL</a> to help alleviate some of these pain points.</p>

<p><abbr title="Doctrine database abstraction &amp; access layer">Doctrine DBAL</abbr> is a wrapper around <a href="http://php.net/manual/en/book.pdo.php">PDO</a>.
It adds a few conveniences beyond straight PDO as well as a query builder.</p>

<!--more-->

<p>There are a <a href="http://www.doctrine-project.org/projects.html">number of projects</a> under the Doctrine umbrella including a full <abbr title="Object Relational Mapper">ORM</abbr>.
This article will only cover the DBAL project.</p>

<h2 id="installing-doctrine-dbal">Installing Doctrine DBAL</h2>

<p>The recommended way to install Doctrine DBAL is via <a href="https://getcomposer.org/">composer</a>.</p>

<p>Add to the composer.json require section</p>

<pre><code class="json">"doctrine/dbal": "2.3.4"
</code></pre>

<p>Alternatively you can download a zip archive from the <a href="http://www.doctrine-project.org/projects/dbal.html">project page</a>.</p>

<p>If you aren't using composer or don't have a PSR-0 compatible autoloader you will need to add the class loader in the Doctrine/Common folder to load the Doctrine DBAL classes.</p>

<p><a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/introduction.html">Setup Class Loader</a></p>

<pre><code class="php">use Doctrine\Common\ClassLoader;

require '/path/to/doctrine/lib/Doctrine/Common/ClassLoader.php';

$classLoader = new ClassLoader('Doctrine', '/path/to/doctrine');
$classLoader-&gt;register();
</code></pre>

<h2 id="connecting-to-the-database">Connecting to The Database</h2>

<p>Doctrine DBAL can connect to any type of database that PDO can connect to.
For this article I am going to assume you are connecting to MySQL but the api is the same regardless of the database you are connecting to.</p>

<p><a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#">Connection Documentation</a></p>

<pre><code class="php">$config = new \Doctrine\DBAL\Configuration();

$connectionParams = array(
    'dbname' =&gt; 'database',
    'user' =&gt; 'user',
    'password' =&gt; 'password',
    'host' =&gt; 'localhost',
    'port' =&gt; 3306,
    'charset' =&gt; 'utf8',
    'driver' =&gt; 'pdo_mysql',
);
$dbh = \Doctrine\DBAL\DriverManager::getConnection($connectionParams, $config);
</code></pre>

<p>One advantage that Doctrine DBAL has over plain PDO is that the Doctrine connection doesn't actually connect to the database until the first query is run.
This means you can create the connection in the bootstrap of your application and if no queries are run for a particular request it wont need to actually connect to the database server.
PDO connects to the database server as soon as you create a PDO instance.</p>

<h2 id="running-queries">Running Queries</h2>

<p>Being a wrapper around PDO you can use the full PDO api including prepared statements and transactions just like you would with straight PDO.</p>

<p>Fetching Data works exactly the same as with straight PDO.</p>

<p><a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#fetchall">Fetching Documentation</a></p>

<pre><code class="php">// Fetch one row
$sth = $dbh-&gt;query("SELECT * FROM users WHERE id = 1");
$user = $sth-&gt;fetch();

// Fetch all rows
$sth = $dbh-&gt;query("SELECT * FROM users");
$users = $sth-&gt;fetchAll();

// Fetch column as scalar value
$sth = $dbh-&gt;query("SELECT email FROM users WHERE id = 1");
$email = $sth-&gt;fetchColumn();

// Fetch column as array of scalar values
$sth = $dbh-&gt;query("SELECT email FROM users");
$emails = $sth-&gt;fetchAll(PDO::FETCH_COLUMN);

// Fetch column as key value pairs
$sth = $dbh-&gt;query("SELECT id, email FROM users");
$users = $sth-&gt;fetchAll(PDO::FETCH_KEY_PAIR);
</code></pre>

<p>Prepared statements are also the same as straight PDO.</p>

<p><a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#using-prepared-statements">Prepared Statements Documentation</a></p>

<pre><code class="php">$sth = $dbh-&gt;prepare("SELECT * FROM users WHERE id = ?");
$sth-&gt;bindValue(1, $id, PDO::PARAM_INT);
$sth-&gt;execute();
$user = $sth-&gt;fetchAssoc();

$sth = $dbh-&gt;prepare("UPDATE users SET name = :name, email = :email WHERE id = :id");
$sth-&gt;bindeValue(":name", $name);
$sth-&gt;bindeValue(":email", $email);
$sth-&gt;bindeValue(":id", $id, PDO::PARAM_INT);
$sth-&gt;execute();
</code></pre>

<p>With Doctrine DBAL you can combine preparing and executing into one step.</p>

<p>Preparing and Executing in one command</p>

<pre><code class="php">$sth = $conn-&gt;executeQuery('SELECT * FROM users WHERE email = ?', array('email@excample.com'));
$user = $sth-&gt;fetch();

// executeUpdate will return the number of affected rows
$count = $dbh-&gt;executeUpdate("UPDATE users SET name = ?, email = ? WHERE id = ?", array($name, $email, $id));
// Same with named parameters
$count = $dbh-&gt;executeUpdate("UPDATE users SET name = :name, email = :email WHERE id = :id", array('name' =&gt; $name, 'email' =&gt; $email, 'id' =&gt; $id));

// You can even prepare, execute, and fetch in one step
$users = $dbh-&gt;fetchAll("SELECT * FROM users WHERE name LIKE ?", array($name . '%'));
</code></pre>

<h2 id="inserts%2C-updates%2C-and-deletes">Inserts, Updates, and Deletes</h2>

<p>With Doctrine DBAL you don't even need to write sql for inserts, updates, and deletes.</p>

<p><a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#insert">Inserts Documentation</a></p>

<pre><code class="php">// Insert a new user into the users table
$dbh-&gt;insert('users', array('name' =&gt; 'Bob', 'email' =&gt; 'bob@example.com'));
// This is the same as running the following query
// INSERT INTO users (name, email) VALUES ('Bob', 'bob@example.com')
</code></pre>

<p><a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#update">Updates Documentation</a></p>

<pre><code class="php">$dbh-&gt;update('users', array('name' =&gt; 'Bob'), array('id' =&gt; 1));
// This is the same as running the following query
// UPDATE users SET name = 'Bob' WHERE id = 1
</code></pre>

<p><a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html#delete">Deletes Documentation</a></p>

<pre><code class="php">$dbh-&gt;delete('users', array('id' =&gt; 1));
// This is the same as running the following query
// DELETE FROM users WHERE id = 1
</code></pre>

<h2 id="query-builder">Query Builder</h2>

<p>Doctrine DBAL also features a <a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html">query builder</a> to help build complicated SQL queries.</p>

<pre><code class="php">// This will run the following query
/*
SELECT u.id, u.name, u.email, p.bio
FROM users u
INNER JOIN user_profile p ON (u.id = p.user_id)
WHERE u.id = 1
ORDER BY u.name ASC
*/
$id = 1;
$query = $dbh-&gt;createQueryBuilder();
$query-&gt;select('u.id', 'u.name', 'u.email', 'p.bio')
      -&gt;from('users', 'u')
      -&gt;innerJoin('u', 'user_profile', 'p', 'u.id = p.user_id')
      -&gt;orderBy('u.name', 'ASC')
      -&gt;where('u.id = :id')
      -&gt;setParameter(':id', $id)
;
$sth = $query-&gt;execute();
$user = $sth-&gt;fetchAssoc();
</code></pre>

<p>Where I find the query builder to be the most helpful is when you have parts of the query that are dependent on user provided data.</p>

<p>For example imagine a page with a search form with multiple fields that filter results by different columns.
You might have a text field to search the names of users and another text field to search by email address.
There is also a select box to search by account type with the values Any, Editors, and Members.
If Any is selected you do not want to filter by account type but if Editors or Members is selected you do.
With the other fields you only want to filter them if the user entered anything in the fields.
You always only want to return active accounts.</p>

<pre><code class="php">// User provided search data
$search = array(
  'name' =&gt; 'Bob',
  'email' =&gt; null,
  'type' =&gt; 'any'
);

// Query That should be run
// SELECT * FROM users WHERE name LIKE '%Bob%'
</code></pre>

<pre><code class="php">// User provided search data
$search = array(
  'name' =&gt; 'Bob',
  'email' =&gt; 'email@example.com',
  'type' =&gt; 'member'
);

// Query That should be run
// SELECT * FROM users WHERE active = 1 AND name LIKE '%Bob%' AND email LIKE '%email@example.com%' AND type = 'member' ORDER BY name ASC
</code></pre>

<p>With straight SQL the only way to build this query is with string concatenation.</p>

<p>Building query with string concatenation and PDO</p>

<pre><code class="php">$where = array("active = 1");
if ($search['name']) {
    $where[] = "name LIKE :name";
}
if ($search['email']) {
    $where[] = "email LIKE :email";
}
if ($search['type'] != 'any') {
    $where[] = "type = :type";
}
if ($where) {
    $where = implode(" AND ", $where);
} else {
    $where = '';
}

$sql = "SELECT * FROM users WHERE " . $where . " ORDER BY name ASC";
$sth = $dbh-&gt;prepare($sql);
if ($search['name']) {
    $sth-&gt;bindValue(':name', "%" . $search['name'] . "%");
}
if ($search['email']) {
    $sth-&gt;bindValue(':email', "%" . $search['email'] . "%");
}
if ($search['type'] != 'any') {
    $sth-&gt;bindValue(':type', $search['type']);
}
$sth-&gt;execute();
$users = $sth-&gt;fetchAll(PDO::FETCH_ASSOC);
</code></pre>

<p>This example is actually pretty simple and the code is already difficult to understand.</p>

<p>Lets look at the same example using the query builder</p>

<p>Using the query builder</p>

<pre><code class="php">$query = $dbh-&gt;createQueryBuilder();
$query-&gt;select('*');
$query-&gt;from('users');
$query-&gt;where("active = 1");
if ($search['name']) {
    $query-&gt;andWhere('name LIKE :name');
    $query-&gt;setParameter(':name', "%" . $search['name'] . "%");
}
if ($search['email']) {
    $query-&gt;andWhere('email LIKE :email');
    $query-&gt;setParameter(':email', "%" . $search['email'] . "%");
}
if ($search['type'] != 'any') {
    $query-&gt;andWhere('type = :type');
    $query-&gt;setParameter(':type', $search['type']);
}
$query-&gt;orderBy('name', 'ASC');
$sth = $query-&gt;execute();
$users = $sth-&gt;fetchAll(PDO::FETCH_ASSOC);
</code></pre>

<p>Not only is that code shorter but if you read it out loud it even sounds more like English.
This greatly helps at understanding what the code does at a glance 6 months later.</p>

<p>The query builder does result in some extra overhead as it needs to compile the query so raw SQL is generally a better idea if the query is simple.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Doctrine DBAL adds a lot of functionality for a very lightweight overhead.
Even if you don't use the query builder it is worth it for the shorter syntax on inserts, updates, and deletes as well as the ability to prepare, execute, and fetch data in one statement.</p>

<p>There is a lot more functionality I didn't cover so I recommend taking a look at <a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/index.html">the documentation</a>
for other pieces of functionality such as events, a schema manager, caching, sharding, and more.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Moving from mysql_query to PDO]]></title>
            <link href="https://www.thedevfiles.com/2014/08/moving-from-mysql-query-to-pdo/"/>
            <updated>2014-08-08T00:00:00-07:00</updated>
            <id>https://www.thedevfiles.com/2014/08/moving-from-mysql-query-to-pdo</id>
            <summary><![CDATA[The php mysql extension has been marked as deprecated. This article will introduce PDO as a replacement.]]></summary>            <content type="html"><![CDATA[<p>The mysql extension has been marked as deprecated as of php 5.5.0 and will be removed completely in a future version.</p>

<p>It is old and not very user friendly.</p>

<p>This article will introduce PDO as a replacement.</p>

<!--more-->

<h2 id="connecting-to-a-database">Connecting to a Database</h2>

<h3 id="connecting-with-mysql_connect">Connecting with mysql_connect</h3>

<pre><code class="php">$link = mysql_connect('localhost', 'user', 'password');
mysql_select_db('database', $link);
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/function.mysql-connect.php">mysql_connect</a> function returns a MySQL link identifier if the database connection was successful or FALSE if the connection was not successful.
After connecting to the database server the database must be selected before any queries can be run on it.
This is done with the <a href="http://us3.php.net/manual/en/function.mysql-select-db.php">mysql_select_db</a> function.</p>

<h3 id="connecting-with-pdo">Connecting with PDO</h3>

<pre><code class="php">$dbh = new PDO('mysql:host=localhost;dbname=database', 'user', 'password');
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/pdo.construct.php">PDO constructor</a> accepts a <abbr title="Data Source Name">DSN</abbr> as the first parameter and the user and password as the second and third parameter.</p>

<p>This will create a new PDO instance if successful or throw a <a href="http://us3.php.net/manual/en/class.pdoexception.php">PDOException</a> if the connection fails.
I will go into error handling later on.</p>

<h2 id="running-a-query">Running a Query</h2>

<h3 id="running-a-query-with-mysql_query">Running a query with mysql_query</h3>

<pre><code class="php">$result = mysql_query("SELECT * FROM tablename", $link);
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/function.mysql-query.php">mysql_query</a> function accepts the sql query as a string for the first parameter and the mysql link identifier returned from the mysql_connect function as the second parameter.
For a successfully query it returns a resource for a query that would return a result-set such as a SELECT query and TRUE for a INSERT, UPDATE, or DELETE query.
It returns FALSE if the query fails.</p>

<h3 id="running-a-query-with-pdo">Running a query with PDO</h3>

<pre><code class="php">$sth = $dbh-&gt;query("SELECT * FROM tablename");
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/pdo.query.php">query</a> method on the PDO object accepts the sql query as its only parameter.
By default it returns an instance of <a href="http://us3.php.net/manual/en/class.pdostatement.php">PDOStatement</a> if successful or FALSE if not.
This can be changed my modifying the error mode for the connection.  This will be explained further in the Handling Errors section.</p>

<h2 id="fetching-data">Fetching Data</h2>

<h3 id="fetching-a-single-row-with-mysql_fetch_assoc">Fetching a single row with mysql_fetch_assoc</h3>

<pre><code class="php">$users = array();
$result = mysql_query("SELECT * FROM users WHERE id = 1", $link);
$user = mysql_fetch_assoc($result)
</code></pre>

<p>To get the data from a query you can use the mysql_fetch_* functions.
To return the data as an associative array use the <a href="http://us3.php.net/manual/en/function.mysql-fetch-assoc.php">mysql_fetch_assoc</a> function.
To return the data as a numeric indexed array use the <a href="http://us3.php.net/manual/en/function.mysql-fetch-row.php">mysql_fetch_row</a> function.
To return the data as an object use the <a href="http://us3.php.net/manual/en/function.mysql-fetch-object.php">mysql_fetch_object</a> function.
It will return the next row in the result-set or FALSE of there are no more rows.</p>

<h3 id="fetching-a-single-row-with-pdo">Fetching a single row with PDO</h3>

<pre><code class="php">$sth = $dbh-&gt;query("SELECT * FROM users WHERE id = 1");
$user = $sth-&gt;fetch(PDO::FETCH_ASSOC);
</code></pre>

<p>You can use the <a href="http://us3.php.net/manual/en/pdostatement.fetch.php">fetch</a> method on the <a href="http://us3.php.net/manual/en/class.pdostatement.php">PDOStatement</a> object returned from the <a href="http://us3.php.net/manual/en/pdo.query.php">PDO::query</a> method.
It accepts the fetch style as the first parameter.
To return data as an associative array pass the PDO::FETCH_ASSOC constant.
To return data as a numeric indexed array pass the PDO::FETCH_NUM constant.
To return data as an object pass the PDO::FETCH_OBJ constant.</p>

<h3 id="fetching-all-rows-with-mysql_fetch_assoc">Fetching all rows with mysql_fetch_assoc</h3>

<pre><code class="php">$users = array();
$result = mysql_query("SELECT * FROM users", $link);
while ($row = mysql_fetch_assoc($result)) {
    $users[] = $row;
}
</code></pre>

<p>To fetch all of the rows from a result-set you will need to loop through calling mysql_fetch_* until it returns false.
This will result in an multi-dimensional associative array with all the records in the users table.</p>

<h3 id="fetching-all-rows-with-pdo%3A%3Afetchall">Fetching all rows with PDO::fetchAll</h3>

<pre><code class="php">$sth = $dbh-&gt;query("SELECT * FROM users");
$users = $sth-&gt;fetchAll(PDO::FETCH_ASSOC);
</code></pre>

<p>There is no need to loop to pull an entire result-set with PDO.
Just use the <a href="http://us3.php.net/manual/en/pdostatement.fetchall.php">PDOStatement::fetchAll</a> method passing the result style you want.</p>

<h3 id="getting-the-row-id-of-the-inserted-record-with-mysql_insert_id">Getting the row id of the inserted record with mysql_insert_id</h3>

<pre><code class="php">mysql_query("INSERT INTO users (first_name, last_name, email_address) VALUES ('John', 'Doe', 'email@example.com')", $link);
$id = mysql_insert_id($link);
</code></pre>

<p>After performing an insert query call <a href="http://us3.php.net/manual/en/function.mysql-insert-id.php">mysql_insert_id</a> to get the row id of the last inserted record.</p>

<h3 id="getting-the-row-id-of-the-inserted-record-with-pdo%3A%3Alastinsertid">Getting the row id of the inserted record with PDO::lastInsertId</h3>

<pre><code class="php">$dbh-&gt;query("INSERT INTO users (first_name, last_name, email_address) VALUES ('John', 'Doe', 'email@example.com')", $link);
$id = $dbh-&gt;lastInsertId();
</code></pre>

<p>After performing an insert query call the <a href="http://us3.php.net/manual/en/pdo.lastinsertid.php">PDO::lastInsertId</a> method to get the row id of the last inserted record.</p>

<h2 id="other-fetching-methods">Other Fetching Methods</h2>

<p>One feature in PDO that isn't available in the mysql extension is a couple more advanced fetching methods.</p>

<p>I've already shown you the <a href="http://php.net/manual/en/pdostatement.fetch.php">PDOStatement::fetch</a> method to fetch a single row and the <a href="http://php.net/manual/en/pdostatement.fetchall.php">PDOStatement ::fetchAll</a> method to fetch all rows.</p>

<h3 id="fetching-a-single-column-from-a-single-record">Fetching a single column from a single record</h3>

<p>Say you want to pull the user id of a user with a given email address.
You do not need any of the other user data, just the id.</p>

<p>With the mysql extension you would end up with an array with one key an value.</p>

<pre><code class="php">$result = mysql_query("SELECT id FROM users WHERE email = 'bob@example.com'", $link);
$row = mysql_fetch_assoc($result);
if ($row) {
    $id = $row['id'];
} else {
    $id = false;
}
</code></pre>

<p>With PDO you can fetch the id as a scalar value</p>

<pre><code class="php">$sth = $dbh-&gt;query("SELECT id FROM users WHERE email = 'bob@example.com'");
$id = $sth-&gt;fetchColumn();
</code></pre>

<h3 id="fetching-an-array-of-scalar-values">Fetching an array of scalar values</h3>

<p>Now say you wanted an array of user ids for all active users.</p>

<pre><code class="php">$users = array();
$result = mysql_query("SELECT id FROM users WHERE active = 1", $link);
while ($row = mysql_fetch_assoc($result)) {
    $users[] = $row['id'];
}
</code></pre>

<pre><code class="php">$sth = $dbh-&gt;query("SELECT id FROM users WHERE active = 1");
$users = $sth-&gt;fetchAll(PDO::FETCH_COLUMN);
</code></pre>

<h3 id="fetching-key-value-pairs">Fetching key value pairs</h3>

<p>Now say you wanted an array of users with the user id as the keys and the user's name as the values.</p>

<pre><code class="php">$users = array();
$result = mysql_query("SELECT id, name FROM users", $link);
while ($row = mysql_fetch_assoc($result)) {
    $users[$row['id']] = $row['name'];
}
</code></pre>

<pre><code class="php">$sth = $dbh-&gt;query("SELECT id, name FROM users");
$users = $sth-&gt;fetchAll(PDO::FETCH_KEY_PAIR);
</code></pre>

<h3 id="fetching-into-a-specific-class">Fetching into a specific class</h3>

<p>Many times you want to populate a class with result from a query.</p>

<p>This is easy with PDO.</p>

<pre><code class="php">class User
{
    public $id;
    public $name;
    public $email;
}

$sth = $dbh-&gt;query("SELECT id, name, email FROM users WHERE id = 1");
$users = $sth-&gt;fetch(PDO::FETCH_CLASS, 'user');
</code></pre>

<p>This isn't that exciting with an example as simple as this but the User class can have other methods in it or validation with the __set() magic method.
You can also pass it to methods with type hinting to ensure you are getting the correct data.</p>

<h2 id="handling-errors">Handling Errors</h2>

<p>How you handle errors is an important part of developing an application.
It cannot be assumed that the database will always be up and every query will succeed.</p>

<p>Without checking if a given query was successful the code will continue running assuming that was query was successful.
This can lead to further problems with the application.
For example if you have a user registration form that inserts the user into the database then sends out an activation email it makes no sense to send the email unless the account was created successfully.</p>

<p>A lot of example code in the wild will use the <a href="http://us3.php.net/manual/en/function.die.php">die</a> function to exit the script when a mysql_* function fails printing the database error using the <a href="http://us2.php.net/manual/en/function.mysql-error.php">mysql_error</a> function.
This is generally not the best way to handle errors.
Printing the errors to the screen can expose information to the user than can compromise security.</p>

<p>A better idea would be to log any errors that occur and show the user a human readable error message saying something went wrong either by redirecting them to an error page or showing the message on the current page.</p>

<p>For the following examples I'm going to assume that you have defined a function names handle_error that accepts an error message and error code.</p>

<pre><code class="php">/**
 *
 * Logs error
 *
 * @param string $message Human friendly error message
 * @param string $error Error message returned from function or method that failed
 * @param int $code Error code from failed function or method
 * @param mixed $extra Any extra data you want to log.
 *
 * @return void
 */
function log_error($message, $error = null, $code = null, $extra = null){
    // This would log the error to an error log
    // You could use an existing logging library or use a simple fwrite.
    // For a good logging library I recommend monolog https://github.com/Seldaek/monolog
}
</code></pre>

<h3 id="handling-errors-with-mysql_connect-and-mysql_query">Handling errors with mysql_connect and mysql_query</h3>

<p>In general the mysql_* functions return FALSE when they fail.  After calling one of them you need to check the result to see if it was successful.</p>

<p>The function <a href="http://us2.php.net/manual/en/function.mysql-error.php">mysql_error</a> will return a text error message of the last error that occurred and <a href="http://us2.php.net/manual/en/function.mysql-errno.php">mysql_errno</a> will return a numeric error code.</p>

<pre><code class="php">$link = mysql_connect('localhost', 'user', 'password');
if ($link === false) {
    log_error("Failed to connect to database", mysql_error(), mysql_errno());
    // This would store the human readable message for the next request
    flash_message("There was a problem connecting to the database. Please try again later.");
    // This could redirect to a separate error page or just to itself
    header('location: error.php');
    exit;
}
if (mysql_select_db('database', $link) === false) {
    log_error("Failed to select database", mysql_error(), mysql_errno());
    // This would store the human readable message for the next request
    flash_message("There was a problem connecting to the database. Please try again later.");
    // This could redirect to a separate error page or just to itself
    header('location: error.php');
    exit;
}
</code></pre>

<p>You can handle errors with queries much the same way.</p>

<pre><code class="php">$result = mysql_query("INSERT INTO users (first_name, last_name, email_address) VALUES ('John', 'Doe', 'email@example.com')", $link);
if ($result === false) {
    log_error("Failed to insert user", mysql_error(), mysql_errno());
    // This would store the human readable message for the next request
    flash_message("There was a problem creating your account. Please try again later.");
    // This could redirect to a separate error page or just to itself
    header('location: error.php');
    exit;
}
</code></pre>

<h3 id="handling-errors-with-pdo">Handling errors with PDO</h3>

<p>PDO has multiple ways of <a href="http://us3.php.net/manual/en/pdo.error-handling.php">handling errors</a>.</p>

<p>There are three error modes for PDO.</p>

<p>The first is PDO::ERRMODE_SILENT.
This acts much like the mysql_* functions in that after calling a PDO method you need to check <a href="http://us3.php.net/manual/en/pdo.errorcode.php">PDO::errorCode</a> or <a href="http://us3.php.net/manual/en/pdo.errorinfo.php">PDO::errorInfo</a> to see if it was successful.</p>

<p>The second error mode is PDO::ERRMODE_WARNING.
This is much the same except an E_WARNING message is also thrown.</p>

<p>The final error mode is PDO::ERRMODE_EXCEPTION.
This one throws a <a href="http://us3.php.net/manual/en/class.pdoexception.php">PDOException</a> when an error occurs.
This is the method I recommend and will be using it for further examples.</p>

<pre><code class="php">// You can set the error mode using the fourth options parameter on the constructor
$dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION));

// or you can use the setAttribute method to set the error mode on an existing connection
$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
</code></pre>

<pre><code class="php">try {
    $dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION));
} catch (PDOException $e) {
    log_error("Failed to connect to database", $e-&gt;getMessage(), $e-&gt;getCode(), array('exception' =&gt; $e));
}
</code></pre>

<pre><code class="php">try {
    $dbh-&gt;query("INVALID SQL");
} catch (PDOException $e) {
    log_error("Failed to run query", $e-&gt;getMessage(), $e-&gt;getCode(), array('exception' =&gt; $e));
}
</code></pre>

<h2 id="escaping-data">Escaping Data</h2>

<p>Whenever you execute a query that contains any data other than string literals you need to guard yourself against <a href="http://en.wikipedia.org/wiki/SQL_injection">SQL Injection</a>.</p>

<p>All data should be escaped whether it comes from a posted form, another database query, read from a file, or returned from a web service.
Anything that is not a hard-coded string that you typed yourself cannot be trusted and needs to be escaped.</p>

<h3 id="escaping-data-with-the-mysql-extension">Escaping data with the mysql extension</h3>

<p>Escaping data with the mysql extension is done with the <a href="http://php.net/manual/en/function.mysql-real-escape-string.php">mysql_real_escape_string</a> function.</p>

<pre><code class="php">$query = sprintf("SELECT * FROM users WHERE username='%s' AND password='%s'",
    mysql_real_escape_string($name, $link),
    mysql_real_escape_string($password, $link)
);
$result = mysql_query($query, $link);
if ($result === false) {
    log_error("Failed to select user", mysql_error(), mysql_errno());
    $user = false;
} else {
    $user = mysql_fetch_assoc($result)
}
</code></pre>

<h3 id="escaping-data-with-pdo">Escaping data with PDO</h3>

<p>PDO has a similar method of escaping data <a href="http://php.net/manual/en/pdo.quote.php">PDO::quote</a>.
However this isn't the best way of handling passing data to queries with PDO.</p>

<h2 id="prepared-statements">Prepared Statements</h2>

<p>Up until now I haven't covered anything that would provide a real advantage to switching to PDO.
Sure some of the syntax is a little shorter and easier to work with but are just differences in syntax for the same features.</p>

<p>Now I'll get to features that you just cannot do with the plain mysql extension.</p>

<p>Prepared statements work a little differently than just replacing placeholders with escaped strings like you would do with the <a href="http://php.net/manual/en/function.mysql-real-escape-string.php">mysql_real_escape_string</a> function or the <a href="http://php.net/manual/en/pdo.quote.php">PDO::quote</a> method.</p>

<p>With a prepared statement the query is actually sent to the database with the placeholders.
This query is compiled and a statement is returned.
You then send the data over separately and the database does handles all the escaping and replacing for you.
This makes them much safer and less error prone than escaping the data yourself.</p>

<p>With PDO there are two ways of providing parameters for a prepared statement.</p>

<pre><code class="php">try {
    $sth = $dbh-&gt;prepare("SELECT * FROM users WHERE username = ? AND password = ?");
    $sth-&gt;execute(array($username, $password));
    $user = $sth-&gt;fetch(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    log_error("Failed to select user", $e-&gt;getMessage(), $e-&gt;getCode(), array('exception' =&gt; $e));
}
</code></pre>

<pre><code class="php">try {
    $sth = $dbh-&gt;prepare("SELECT * FROM users WHERE username = :username AND password = :password");
    $sth-&gt;execute(array(
        'username' =&gt; $username,
        'password' =&gt; $password
    ));
    $user = $sth-&gt;fetch(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    log_error("Failed to select user", $e-&gt;getMessage(), $e-&gt;getCode(), array('exception' =&gt; $e));
}
</code></pre>

<p>Notice that in both of these he values are not surrounded in quotes like with the mysql extension.
Adding quotes will result in a failed query.</p>

<p>I recommend always using a prepared statement if your query involves any data that you would otherwise need to escape.</p>

<h3 id="executing-a-prepared-statement-multiple-times">Executing a prepared statement multiple times</h3>

<p>Another big advantage to using a prepared statement is when you need to execute a query multiple times with different data, such as inserting multiple records.</p>

<p>You can prepare the query and execute it multiple times.</p>

<pre><code class="php">$users = array(
  array(
    'name' =&gt; 'Bob',
    'email' =&gt; 'bob@example.com'
  ),array(
    'name' =&gt; 'Steve',
    'email' =&gt; 'steve@example.com'
  ),array(
    'name' =&gt; 'Carl',
    'email' =&gt; 'carl@example.com'
  ),array(
    'name' =&gt; 'John',
    'email' =&gt; 'john@example.com'
  ),array(
    'name' =&gt; 'Ken',
    'email' =&gt; 'ken@example.com'
  )
);
$sth = $dbh-&gt;prepare("INSERT INTO users (name, email) VALUES (:name, :email)");
foreach ($users as $user) {
    try {
        $sth-&gt;execute($user);
    } catch (PDOException $e) {
        log_error("Failed to insert user", $e-&gt;getMessage(), $e-&gt;getCode(), array('exception' =&gt; $e));
    }
}
</code></pre>

<p>Because the query is only parsed and compiled by the database once executing a prepared statement multiple times will be much faster than running the full query multiple times.</p>

<h3 id="escaping-identifiers">Escaping identifiers</h3>

<p>One limitation to parameters in prepared statements is that they can only be used for values.
You use parameters for things like table or column names.</p>

<p>For example the following will not work.</p>

<pre><code class="php">$column = $_POST['column'];
$value = $_POST['search'];
$sth = $dbh-&gt;prepare("SELECT * FROM users where :column = :value");
$sth-&gt;bindValue(':column', $column);
$sth-&gt;bindValue(':value', $value);
$sth-&gt;execute();
</code></pre>

<p>Since you should know what columns a table has the best way to do something like this is to check the column against a whitelist of accaptible data before passing to your query.</p>

<pre><code class="php">$column = $_POST['column'];
$value = $_POST['search'];

$allowed = array('name', 'email');
if(!in_array($column, $allowed)){
    // throw an error and do not execute the query.
} else {
    $sth = $dbh-&gt;prepare("SELECT * FROM users where $column = :value");
    $sth-&gt;bindValue(':column', $column);
    $sth-&gt;bindValue(':value', $value);
    $sth-&gt;execute();
}
</code></pre>

<h2 id="transactions">Transactions</h2>

<p>Transactions are another useful feature that isn't available with the mysql extension.</p>

<p>Lets say you have a user table that stores the user's login credentials and you have a user_profile that stores extra profile data for that user with a foreign key to the user table.</p>

<table>
<thead>
<tr>
  <th>user</th>
  <th>user_profile</th>
</tr>
</thead>
<tbody>
<tr>
  <td>user_id</td>
  <td>profile_id</td>
</tr>
<tr>
  <td>name</td>
  <td>user_id</td>
</tr>
<tr>
  <td>email</td>
  <td>bio</td>
</tr>
<tr>
  <td>password</td>
  <td>interests</td>
</tr>
</tbody>
</table>

<p>When you add a new user you also want to add the user's profile and then send a welcome email to the user.</p>

<h3 id="what-happens-if-a-query-fails%3F">What happens if a query fails?</h3>

<p>If the insert into the user table fails you can throw an error and not try to insert the profile.</p>

<p>But what happens if the insert into the user_profile table fails?
It could break your application to have a user without a profile.
Do you try to delete the newly inserted user if the second query fails?</p>

<p>What happens if the welcome email fails?
What if this email is vital to the application and that if it fails you may as well have never created the account?
Do you delete both records if it fails?</p>

<p>This is a already messy and could get worse with more tables or other steps.</p>

<p>Fortunately transactions can help with this.</p>

<p>In this example assume the MailSender class throws an exception if the email fails to be sent.</p>

<pre><code class="php">$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$dbh-&gt;beginTransaction();
try {
    $sth = $dbh-&gt;prepare("INSERT INTO user (name, email, password) VALUES (?, ?, ?)");
    $sth-&gt;execute(array($name, $email, $password));
    $user_id = $dbh-&gt;lastInsertId();
    $sth-&gt;prepare("INSERT INTO user_profile (user_id, bio, interests) VALUES (?, ?, ?)");
    $sth-&gt;execute(array($user_id, $bio, $interests));
    $mailer = new MailSender();
    $mailer-&gt;sendWelcomeEmail($name, $email);
    $dbh-&gt;commit();
} catch (Exception $e) {
    $dbh-&gt;rollBack();
    // handle the error
}
</code></pre>

<p>If any of the queries fail or the mail sender fails to send the mail the executed queries will be rolled back.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I've only scratched the surface of what PDO can do beyond the basic mysql extension.</p>

<p>Once you've used it a while and get used to the syntax you'll wonder how you ever lived without it.</p>
]]></content>
        </entry>
    </feed>
