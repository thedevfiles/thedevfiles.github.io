<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | The Dev Files]]></title>
  <link href="http://www.thedevfiles.com/category/mysql/atom.xml" rel="self"/>
  <link href="http://www.thedevfiles.com/"/>
  <updated>2014-08-06T18:27:44-07:00</updated>
  <id>http://www.thedevfiles.com/</id>
  <author>
    <name><![CDATA[Jonathan Bernardi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving from mysql_query to PDO]]></title>
    <link href="http://www.thedevfiles.com/2014/07/moving-from-mysql-query-to-pdo/"/>
    <updated>2014-07-28T20:01:33-07:00</updated>
    <id>http://www.thedevfiles.com/2014/07/moving-from-mysql-query-to-pdo</id>
    <content type="html"><![CDATA[<p>The mysql extension has been marked as depricated as of php 5.5.0 and will be removed completely in a future version.</p>

<!--more-->


<h2>Connecting to a Database</h2>

<h3>Connecting with mysql_connect</h3>

<pre><code class="php mysql_connect http://us2.php.net/manual/en/function.mysql-connect.php docs">$link = mysql_connect('localhost', 'user', 'password');
mysql_select_db('database', $link);
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/function.mysql-connect.php">mysql_connect</a> function returns a MySQL link identifier if the database connection was sucessful or FALSE if the connection was not successful.<br/>
After connecting to the database server the database must be selected before any queries can be run on it.<br/>
This is done with the <a href="http://us3.php.net/manual/en/function.mysql-select-db.php">mysql_select_db</a> function.</p>

<h3>Connecting with PDO</h3>

<pre><code class="php PDO http://us3.php.net/manual/en/pdo.construct.php docs">$dbh = new PDO('mysql:host=localhost;dbname=database', 'user', 'password');
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/pdo.construct.php">PDO contructor</a> accepts a <abbr title="Data Source Name">DSN</abbr> as the first parameter and the user and password as the second and third parameter.</p>

<p>This will create a new PDO instance if successful or throw a <a href="http://us3.php.net/manual/en/class.pdoexception.php">PDOException</a> if the connection fails.<br/>
I will go into error handling later on.</p>

<h2>Running a Query</h2>

<h3>Running a query with mysql_query</h3>

<pre><code class="php mysql_query http://us2.php.net/manual/en/function.mysql-query.php docs">$result = mysql_query("SELECT * FROM tablename", $link);
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/function.mysql-query.php">mysql_query</a> function accepts the sql query as a string for the first parameter and the mysql link identifier returned from the mysql_connect function as the second parameter.<br/>
For a successfuly query it returns a resource for a query that would return a resultset such as a SELECT query and TRUE for a INSERT, UPDATE, or DELETE query.<br/>
It returns FALSE if the query fails.</p>

<h3>Running a query with PDO</h3>

<pre><code class="php PDO::query http://us3.php.net/manual/en/pdo.query.php docs">$sth = $dbh-&gt;query("SELECT * FROM tablename");
</code></pre>

<p>The <a href="http://us3.php.net/manual/en/pdo.query.php">query</a> method on the PDO object accepts the sql query as its only parameter.<br/>
By default it returns an instance of <a href="http://us3.php.net/manual/en/class.pdostatement.php">PDOStatement</a> if successful or FALSE if not.<br/>
This can be changed my modifiying the error mode for the connection.  This will be explained further in the Handling Errors section.</p>

<h2>Fetching Data</h2>

<h3>Fetching a single row with mysql_fetch_assoc</h3>

<pre><code class="php mysql_fetch_assoc http://us2.php.net/manual/en/function.mysql-fetch-assoc.php docs">$users = array();
$result = mysql_query("SELECT * FROM users WHERE id = 1", $link);
$user = mysql_fetch_assoc($result)
</code></pre>

<p>To get the data from a query you can use the mysql_fetch_* functions.
To return the data as an associative array use the <a href="http://us3.php.net/manual/en/function.mysql-fetch-assoc.php">mysql_fetch_assoc</a> function.
To return the data as a numeric indexed array use the <a href="http://us3.php.net/manual/en/function.mysql-fetch-row.php">mysql_fetch_row</a> function.
To return the data as an object use the <a href="http://us3.php.net/manual/en/function.mysql-fetch-object.php">mysql_fetch_object</a> function.
It will return the next row in the resultset or FALSE of there are no more rows.</p>

<h3>Fetching a single row with PDO</h3>

<pre><code class="php PDOStatement::fetch http://us3.php.net/manual/en/pdostatement.fetch.php docs">$sth = $dbh-&gt;query("SELECT * FROM users WHERE id = 1");
$user = $sth-&gt;fetch(PDO::FETCH_ASSOC);
</code></pre>

<p>You can use the <a href="http://us3.php.net/manual/en/pdostatement.fetch.php">fetch</a> method on the <a href="http://us3.php.net/manual/en/class.pdostatement.php">PDOStatement</a> onject returned from the <a href="http://us3.php.net/manual/en/pdo.query.php">PDO::query</a> method.<br/>
It accepts the fetch style as the first parameter.<br/>
To return data as an associative array pass the PDO::FETCH_ASSOC constant.<br/>
To return data as a numberic indexed array pass the PDO::FETCH_NUM constant.<br/>
To return data as an object pass the PDO::FETCH_OBJ constant.</p>

<h3>Fetching all rows with mysql_fetch_assoc</h3>

<pre><code class="php mysql_fetch_assoc http://us2.php.net/manual/en/function.mysql-fetch-assoc.php docs">$users = array();
$result = mysql_query("SELECT * FROM users", $link);
while($row = mysql_fetch_assoc($result)){
    $users[] = $row;
}
</code></pre>

<p>To fetch all of the rows from a resultset you will need to loop through calling mysql_fetch_* until it returns false.<br/>
This will result in an multi-dimensional associative array with all the records in the users table.</p>

<h3>Fetching all rows with PDO::fetchAll</h3>

<pre><code class="php PDOStatement::fetchAll http://us3.php.net/manual/en/pdostatement.fetchall.php docs">$sth = $dbh-&gt;query("SELECT * FROM users");
$users = $sth-&gt;fetchAll(PDO::FETCH_ASSOC);
</code></pre>

<p>There is no need to loop to pull an entire resultset with PDO.<br/>
Just use the <a href="http://us3.php.net/manual/en/pdostatement.fetchall.php">PDOStatement::fetchAll</a> method passing the result style you want.</p>

<h3>Getting the row id of the inserted record with mysql_insert_id</h3>

<pre><code class="php mysql_insert_id http://us2.php.net/manual/en/function.mysql-insert-id.php docs">mysql_query("INSERT INTO users (first_name, last_name, email_address) VALUES ('John', 'Doe', 'email@example.com')", $link);
$id = mysql_insert_id($link);
</code></pre>

<p>After performing an insert query call <a href="http://us3.php.net/manual/en/function.mysql-insert-id.php">mysql_insert_id</a> to get the row id of the last inserted record.</p>

<h3>Getting the row id of the inserted record with PDO::lastInsertId</h3>

<pre><code class="php PDO::lastInsertId http://us3.php.net/manual/en/pdo.lastinsertid.php docs">$dbh-&gt;query("INSERT INTO users (first_name, last_name, email_address) VALUES ('John', 'Doe', 'email@example.com')", $link);
$id = $dbh-&gt;lastInsertId();
</code></pre>

<p>After performing an insert query call the <a href="http://us3.php.net/manual/en/pdo.lastinsertid.php">PDO::lastInsertId</a> method to get the row id of the last inserted record.</p>

<h2>Handling Errors</h2>

<p>How you handle errors is an important part of developing an application.<br/>
It cannot be assumed that the database will always be up and every query will succeed.</p>

<p>Without checking if a given query was successful the code will continue running assuming that was query was successful.<br/>
This can lead to further problems with the application.<br/>
For example if you have a user registration form that inserts the user into the database then sends out an activation email it makes no sense to send the email unless the account was created successfully.</p>

<p>A lot of example code in the wild will use the <a href="http://us3.php.net/manual/en/function.die.php">die</a> function to exit the script when a mysql_* function fails printing the database error using the <a href="http://us2.php.net/manual/en/function.mysql-error.php">mysql_error</a> function.<br/>
This is generally not the best way to handle errors.<br/>
Printing the errors to the screen can expose information to the user than can compromise security.</p>

<p>A better idea would be to log any errors that occur and show the user a human readable error message saying something went wrong either by redirecting them to an error page or showing the message on the current page.</p>

<p>For the following examples I&rsquo;m going to assume that you have defined a function names handle_error that accepts an error message and error code.
<code>php Error Logger
/**
 *
 * Logs error
 *
 * @param string $message Human friendly error message
 * @param string $error Error message returned from function or method that failed
 * @param int $code Error code from failed function or method
 * @param mixed $extra Any extra data you want to log.
 *
 * @return void
 */
function log_error($message, $error = null, $code = null, $extra = null){
    // This would log the error to an error log
    // You could use an existing logging library or use a simple fwrite.
    // For a good logging library I recommend monolog https://github.com/Seldaek/monolog
}
</code></p>

<h3>Handling errors with mysql_connect and mysql_query</h3>

<p>In general the mysql_* functions return FALSE when they fail.  After calling one of them you need to check the result to see if it was successful.</p>

<p>The function <a href="http://us2.php.net/manual/en/function.mysql-error.php">mysql_error</a> will return a text error message of the last error that occurred and <a href="http://us2.php.net/manual/en/function.mysql-errno.php">mysql_errno</a> will return a numeric error code.</p>

<pre><code class="php mysql_connect http://us2.php.net/manual/en/function.mysql-error.php docs">$link = mysql_connect('localhost', 'user', 'password');
if ($link === false) {
    log_error("Failed to connect to database", mysql_error(), mysql_errno());
    // This would store the human readable message for the next request
    flash_message("There was a problem connecting to the database. Please try again later.");
    // This could redirect to a separate error page or just to itself
    header('location: error.php');
    exit;
}
if (mysql_select_db('database', $link) === false) {
    log_error("Failed to select database", mysql_error(), mysql_errno());
    // This would store the human readable message for the next request
    flash_message("There was a problem connecting to the database. Please try again later.");
    // This could redirect to a separate error page or just to itself
    header('location: error.php');
    exit;
}
</code></pre>

<p>You can handle errors with queries much the same way.</p>

<pre><code class="php mysql_query http://us2.php.net/manual/en/function.mysql-error.php docs">$result = mysql_query("INSERT INTO users (first_name, last_name, email_address) VALUES ('John', 'Doe', 'email@example.com')", $link);
if ($result === false) {
    log_error("Failed to insert user", mysql_error(), mysql_errno());
    // This would store the human readable message for the next request
    flash_message("There was a problem creating your account. Please try again later.");
    // This could redirect to a separate error page or just to itself
    header('location: error.php');
    exit;
}
</code></pre>

<h3>Handling errors with PDO</h3>

<p>PDO has multiple ways of <a href="http://us3.php.net/manual/en/pdo.error-handling.php">handling errors</a>.</p>

<p>There are three error modes for PDO.</p>

<p>The first is PDO::ERRMODE_SILENT.<br/>
This acts much like the mysql_* functions in that after calling a PDO method you need to check <a href="http://us3.php.net/manual/en/pdo.errorcode.php">PDO::errorCode</a> or <a href="http://us3.php.net/manual/en/pdo.errorinfo.php">PDO::errorInfo</a> to see if it was successful.</p>

<p>The second error mode is PDO::ERRMODE_WARNING.<br/>
This is much the same except an E_WARNING message is also thrown.</p>

<p>The final error mode is PDO::ERRMODE_EXCEPTION.<br/>
This one throws a <a href="http://us3.php.net/manual/en/class.pdoexception.php">PDOException</a> when an error occurs.
This is the method I recommend and will be using it for further examples.</p>

<pre><code class="php Setting the Error Mode http://us3.php.net/manual/en/pdo.error-handling.php docs">// You can set the error mode using the fourth options parameter on the constructor
$dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION));

// or you can use the setAttribute method to set the error mode on an existing connection
$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
</code></pre>

<pre><code class="php Connect with error handling  http://us3.php.net/manual/en/pdo.error-handling.php docs">try {
    $dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION));
} catch (PDOException $e) {
    log_error("Failed to connect to database", $e-&gt;getMessage(), $e-&gt;getCode(), array('exception' =&gt; $e));
}
</code></pre>

<pre><code class="php Running a query with error handling">try {
    $dbh-&gt;query("INVALID SQL");
} catch (PDOException $e) {
    log_error("Failed to run query", $e-&gt;getMessage(), $e-&gt;getCode(), array('exception' =&gt; $e));
}
</code></pre>

<h2>Escaping Data</h2>

<h2>Prepared Statements</h2>

<h2>Other Fetching Methods</h2>

<h2>Transactions</h2>
]]></content>
  </entry>
  
</feed>
